@* RepoEnvironmentSelector.razor *@
@using MyM365Agent2.Services
@inject IAzureTableStorageService StorageService

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="oi oi-folder me-2"></i>
                    Repository Selection
                </h6>
            </div>
            <div class="card-body">
                <select class="form-select" @onchange="OnRepositoryChanged" value="@SelectedRepository">
                    <option value="">All Repositories</option>
                    @foreach (var repo in availableRepositories)
                    {
                        <option value="@repo">@repo</option>
                    }
                </select>
                @if (!string.IsNullOrEmpty(SelectedRepository))
                {
                    <small class="text-muted mt-2 d-block">
                        <i class="oi oi-info me-1"></i>
                        Showing deployments for: <strong>@SelectedRepository</strong>
                    </small>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="oi oi-globe me-2"></i>
                    Environment Selection
                </h6>
            </div>
            <div class="card-body">
                <select class="form-select" @onchange="OnEnvironmentChanged" value="@SelectedEnvironment">
                    <option value="">All Environments</option>
                    @foreach (var env in availableEnvironments)
                    {
                        <option value="@env">@env</option>
                    }
                </select>
                @if (!string.IsNullOrEmpty(SelectedEnvironment))
                {
                    <small class="text-muted mt-2 d-block">
                        <i class="oi oi-info me-1"></i>
                        Filtered by environment: <strong>@SelectedEnvironment</strong>
                    </small>
                }
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(SelectedRepository) || !string.IsNullOrEmpty(SelectedEnvironment))
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="alert alert-info d-flex justify-content-between align-items-center">
                <div>
                    <i class="oi oi-layers me-2"></i>
                    <strong>Active Filters:</strong>
                    @if (!string.IsNullOrEmpty(SelectedRepository))
                    {
                        <span class="badge bg-primary me-2">Repo: @SelectedRepository</span>
                    }
                    @if (!string.IsNullOrEmpty(SelectedEnvironment))
                    {
                        <span class="badge bg-info me-2">Env: @SelectedEnvironment</span>
                    }
                </div>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ClearFilters">
                    <i class="oi oi-x me-1"></i>
                    Clear Filters
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string SelectedRepository { get; set; } = "";
    [Parameter] public string SelectedEnvironment { get; set; } = "";
    [Parameter] public EventCallback<string> SelectedRepositoryChanged { get; set; }
    [Parameter] public EventCallback<string> SelectedEnvironmentChanged { get; set; }
    [Parameter] public EventCallback OnSelectionChanged { get; set; }

    private List<string> availableRepositories = new();
    private List<string> availableEnvironments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableOptions();
    }

    private async Task LoadAvailableOptions()
    {
        try
        {
            var deployments = await StorageService.GetDeploymentsAsync();

            availableRepositories = deployments
                .Select(d => d.Repository)
                .Where(r => !string.IsNullOrEmpty(r))
                .Distinct()
                .OrderBy(r => r)
                .ToList();

            availableEnvironments = deployments
                .Select(d => d.Environment)
                .Where(e => !string.IsNullOrEmpty(e))
                .Distinct()
                .OrderBy(e => e)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading options: {ex.Message}");
        }
    }

    private async Task OnRepositoryChanged(ChangeEventArgs e)
    {
        SelectedRepository = e.Value?.ToString() ?? "";
        await SelectedRepositoryChanged.InvokeAsync(SelectedRepository);
        await OnSelectionChanged.InvokeAsync();
    }

    private async Task OnEnvironmentChanged(ChangeEventArgs e)
    {
        SelectedEnvironment = e.Value?.ToString() ?? "";
        await SelectedEnvironmentChanged.InvokeAsync(SelectedEnvironment);
        await OnSelectionChanged.InvokeAsync();
    }

    private async Task ClearFilters()
    {
        SelectedRepository = "";
        SelectedEnvironment = "";
        await SelectedRepositoryChanged.InvokeAsync(SelectedRepository);
        await SelectedEnvironmentChanged.InvokeAsync(SelectedEnvironment);
        await OnSelectionChanged.InvokeAsync();
    }
}