@page "/deployments"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using MyM365Agent2.Components
@using Microsoft.AspNetCore.WebUtilities
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject ILogger<DeploymentList> Logger

<PageTitle>GitHub Actions - All Deployments</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/")' aria-label="Go to dashboard">
                            <i class="oi oi-home" aria-hidden="true"></i> Dashboard
                        </button>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">GitHub Actions</li>
                </ol>
            </nav>

            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">
                        <i class="oi oi-list-rich me-2" aria-hidden="true"></i>
                        GitHub Actions History
                    </h2>
                    <p class="text-muted mb-0">Monitor and track all GitHub Action deployments across repositories</p>
                </div>
                <div>
                    <button class="btn btn-primary" @onclick="RefreshData" disabled="@isLoading" aria-label="Refresh deployment data">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="oi oi-reload me-2" aria-hidden="true"></i>
                        }
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <i class="oi oi-warning me-2" aria-hidden="true"></i>
                    <strong>Warning:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close error message"></button>
                </div>
            </div>
        </div>
    }

    <!-- Repository and Environment Selector -->
    <RepoEnvironmentSelector SelectedRepository="@selectedRepository"
                             SelectedEnvironment="@selectedEnvironment"
                             SelectedRepositoryChanged="@HandleRepositoryChanged"
                             SelectedEnvironmentChanged="@HandleEnvironmentChanged"
                             OnSelectionChanged="@OnFiltersChanged" />

    <!-- Filters and Search -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Status Filter</label>
                            <div class="btn-group w-100" role="group" aria-label="Filter by deployment status">
                                <button class="btn @(currentStatusFilter == "" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => SetStatusFilter(""))"
                                        aria-pressed="@(currentStatusFilter == "")">
                                    All (@GetTotalCount().ToString("N0"))
                                </button>
                                <button class="btn @(currentStatusFilter == "success" ? "btn-success" : "btn-outline-success")"
                                        @onclick="@(() => SetStatusFilter("success"))"
                                        aria-pressed="@(currentStatusFilter == "success")">
                                    Success (@GetStatusCount("success").ToString("N0"))
                                </button>
                                <button class="btn @(currentStatusFilter == "failure" ? "btn-danger" : "btn-outline-danger")"
                                        @onclick="@(() => SetStatusFilter("failure"))"
                                        aria-pressed="@(currentStatusFilter == "failure")">
                                    Failed (@GetStatusCount("failure").ToString("N0"))
                                </button>
                                <button class="btn @(currentStatusFilter == "pending" ? "btn-warning" : "btn-outline-warning")"
                                        @onclick="@(() => SetStatusFilter("pending"))"
                                        aria-pressed="@(currentStatusFilter == "pending")">
                                    Active (@GetStatusCount("pending").ToString("N0"))
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold" for="search-input">Search</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="oi oi-magnifying-glass" aria-hidden="true"></i>
                                </span>
                                <input type="text"
                                       id="search-input"
                                       class="form-control"
                                       placeholder="Search workflows, branches, creators..."
                                       @bind="searchTerm"
                                       @onkeyup="OnSearchChanged"
                                       aria-label="Search deployments" />
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-outline-secondary" @onclick="ClearSearch" aria-label="Clear search">
                                        <i class="oi oi-x" aria-hidden="true"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <label class="form-label fw-bold mb-1" for="sort-select">Sort By</label>
                            <select id="sort-select" class="form-select form-select-sm" @onchange="OnSortChanged">
                                <option value="CreatedAt_desc">Latest First</option>
                                <option value="CreatedAt_asc">Oldest First</option>
                                <option value="Repository_asc">Repository A-Z</option>
                                <option value="Repository_desc">Repository Z-A</option>
                                <option value="Status_asc">Status</option>
                            </select>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">
                                Showing @Math.Min(pageSize, filteredDeployments.Count).ToString("N0") of @filteredDeployments.Count.ToString("N0")
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-center align-items-center py-5">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading GitHub Actions...</span>
                        </div>
                        <h5 class="mt-3 text-muted">Loading deployment data...</h5>
                        <p class="text-muted mb-0">Please wait while we fetch the latest information</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!filteredDeployments.Any())
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info text-center">
                    <i class="oi oi-info mb-3" style="font-size: 3rem;" aria-hidden="true"></i>
                    <h4>No GitHub Actions Found</h4>
                    <p class="mb-3">
                        @if (HasActiveFilters())
                        {
                            <text>No deployments match your current filters. Try adjusting your search criteria.</text>
                        }
                        else
                        {
                            <text>No deployment data available. Connect your GitHub repositories to start monitoring actions.</text>
                        }
                    </p>
                    <button class="btn btn-primary" @onclick="ClearAllFilters">
                        <i class="oi oi-layers me-2" aria-hidden="true"></i>
                        Clear All Filters
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Results -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="oi oi-code me-2" aria-hidden="true"></i>
                                GitHub Action Runs
                                @if (filteredDeployments.Count != allDeployments.Count)
                                {
                                    <span class="badge bg-info ms-2">@filteredDeployments.Count.ToString("N0") filtered</span>
                                }
                            </h5>
                            <div class="d-flex align-items-center gap-2">
                                <label for="page-size-select" class="form-label mb-0 me-2">Per page:</label>
                                <select id="page-size-select" class="form-select form-select-sm" @onchange="OnPageSizeChanged" style="width: auto;">
                                    <option value="25">25</option>
                                    <option value="50" selected>50</option>
                                    <option value="100">100</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" role="table" aria-label="GitHub Action deployments">
                                <thead class="table-light">
                                    <tr>
                                        <th class="border-0 sortable" @onclick='() => ToggleSort("Repository")' role="columnheader" tabindex="0">
                                            <div class="d-flex align-items-center">
                                                Repository
                                                @if (sortField == "Repository")
                                                {
                                                    <i class="oi oi-arrow-@(sortAscending ? "top" : "bottom") ms-2" aria-hidden="true"></i>
                                                }
                                            </div>
                                        </th>
                                        <th class="border-0" scope="col">Workflow</th>
                                        <th class="border-0" scope="col">Environment</th>
                                        <th class="border-0 sortable" @onclick='() => ToggleSort("Status")' role="columnheader" tabindex="0">
                                            <div class="d-flex align-items-center">
                                                Status
                                                @if (sortField == "Status")
                                                {
                                                    <i class="oi oi-arrow-@(sortAscending ? "top" : "bottom") ms-2" aria-hidden="true"></i>
                                                }
                                            </div>
                                        </th>
                                        <th class="border-0" scope="col">Branch/Run</th>
                                        <th class="border-0" scope="col">Creator</th>
                                        <th class="border-0 sortable" @onclick='() => ToggleSort("CreatedAt")' role="columnheader" tabindex="0">
                                            <div class="d-flex align-items-center">
                                                Created
                                                @if (sortField == "CreatedAt")
                                                {
                                                    <i class="oi oi-arrow-@(sortAscending ? "top" : "bottom") ms-2" aria-hidden="true"></i>
                                                }
                                            </div>
                                        </th>
                                        <th class="border-0" scope="col">Duration</th>
                                        <th class="border-0" scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var deployment in paginatedDeployments)
                                    {
                                        <tr class="deployment-row">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="oi oi-code me-2 text-primary" aria-hidden="true"></i>
                                                    <div>
                                                        <div class="fw-bold">@deployment.Repository</div>
                                                        @if (!string.IsNullOrEmpty(deployment.WorkflowRunIdDisplay) && deployment.WorkflowRunIdDisplay != "N/A")
                                                        {
                                                            <small class="text-muted">#@deployment.WorkflowRunIdDisplay</small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <div class="fw-medium">@deployment.WorkflowDisplayName</div>
                                                    @if (!string.IsNullOrEmpty(deployment.TriggerType))
                                                    {
                                                        <small class="text-muted">
                                                            <i class="oi oi-flash me-1" aria-hidden="true"></i>
                                                            @deployment.TriggerType
                                                        </small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">
                                                    <i class="oi oi-globe me-1" aria-hidden="true"></i>
                                                    @deployment.Environment
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetStateClass(deployment.StatusCategory)"
                                                      aria-label="Status: @deployment.DisplayStatus">
                                                    <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1" aria-hidden="true"></i>
                                                    @deployment.DisplayStatus
                                                </span>
                                            </td>
                                            <td>
                                                <div>
                                                    @if (!string.IsNullOrEmpty(deployment.Branch))
                                                    {
                                                        <div>
                                                            <i class="oi oi-fork me-1" aria-hidden="true"></i>
                                                            @deployment.Branch
                                                        </div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                                    {
                                                        <small class="text-muted">Run #@deployment.RunNumberDisplay</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="oi oi-person me-2" aria-hidden="true"></i>
                                                    <div>
                                                        <div>@deployment.CreatorLogin</div>
                                                        @if (deployment.HasApprovalWorkflow)
                                                        {
                                                            <small class="text-info">
                                                                <i class="oi oi-shield" aria-hidden="true"></i> Approval Required
                                                            </small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <time datetime="@deployment.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                        <div>@deployment.CreatedAt.ToString("MMM dd, HH:mm")</div>
                                                        <small class="text-muted">@deployment.CreatedAt.ToString("yyyy")</small>
                                                    </time>
                                                </div>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(deployment.FormattedDuration))
                                                {
                                                    <span class="badge bg-light text-dark">
                                                        <i class="oi oi-clock me-1" aria-hidden="true"></i>
                                                        @deployment.FormattedDuration
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="d-flex gap-1">
                                                    @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                                    {
                                                        <a href="@deployment.WorkflowRunUrl"
                                                           target="_blank"
                                                           rel="noopener noreferrer"
                                                           class="btn btn-sm btn-outline-primary"
                                                           title="View on GitHub"
                                                           aria-label="View @deployment.Repository workflow on GitHub">
                                                            <i class="oi oi-external-link" aria-hidden="true"></i>
                                                        </a>
                                                    }
                                                    <button class="btn btn-sm btn-primary"
                                                            @onclick="() => NavigateToDetails(deployment.Repository, deployment.RowKey)"
                                                            title="View Details"
                                                            aria-label="View details for @deployment.Repository deployment">
                                                        <i class="oi oi-eye" aria-hidden="true"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Pagination -->
                    @if (totalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="Deployment pagination">
                                <ul class="pagination pagination-sm justify-content-center mb-0">
                                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                        <button class="page-link"
                                                @onclick="() => GoToPage(currentPage - 1)"
                                                disabled="@(currentPage <= 1)"
                                                aria-label="Go to previous page">
                                            <i class="oi oi-chevron-left" aria-hidden="true"></i>
                                        </button>
                                    </li>

                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link"
                                                    @onclick="() => GoToPage(i)"
                                                    aria-label="Go to page @i"
                                                    aria-current="@(i == currentPage ? "page" : null)">
                                                @i
                                            </button>
                                        </li>
                                    }

                                    <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                        <button class="page-link"
                                                @onclick="() => GoToPage(currentPage + 1)"
                                                disabled="@(currentPage >= totalPages)"
                                                aria-label="Go to next page">
                                            <i class="oi oi-chevron-right" aria-hidden="true"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                            <small class="text-muted d-block text-center mt-2">
                                Page @currentPage of @totalPages • @filteredDeployments.Count.ToString("N0") total results
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
    .deployment-row:hover {
        background-color: #f8f9fa;
    }

    .page-link {
        color: #6264a7;
        border-color: #e1dfdd;
    }

    .page-item.active .page-link {
        background-color: #6264a7;
        border-color: #6264a7;
    }

    .btn-group .btn {
        white-space: nowrap;
    }

    .sortable {
        cursor: pointer;
        user-select: none;
    }

        .sortable:hover {
            background-color: #f1f3f4;
        }

        .sortable:focus {
            outline: 2px solid #6264a7;
            outline-offset: 2px;
        }

    /* Accessibility improvements */
    @@media (prefers-reduced-motion: reduce) {
        .deployment-row

    {
        transition: none;
    }

    }

    @@media (prefers-contrast: high) {
        .table th, .table td

    {
        border-width: 2px;
    }

    }
</style>

@code {
    private List<DeploymentState> allDeployments = new();
    private List<DeploymentState> filteredDeployments = new();
    private List<DeploymentState> paginatedDeployments = new();

    private string selectedRepository = "";
    private string selectedEnvironment = "";
    private string currentStatusFilter = "";
    private string searchTerm = "";
    private string sortField = "CreatedAt";
    private bool sortAscending = false;

    private bool isLoading = true;
    private string? errorMessage = null;
    private int currentPage = 1;
    private int pageSize = 50;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ParseQueryParameters();
            await LoadDeployments();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize deployment list");
            errorMessage = "Failed to load deployment list. Please try refreshing the page.";
        }
    }

    private void ParseQueryParameters()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParameters = QueryHelpers.ParseQuery(uri.Query);

            if (queryParameters.TryGetValue("filter", out var filterValue))
                currentStatusFilter = filterValue.FirstOrDefault() ?? "";

            if (queryParameters.TryGetValue("repo", out var repoValue))
                selectedRepository = filterValue.FirstOrDefault() ?? "";

            if (queryParameters.TryGetValue("env", out var envValue))
                selectedEnvironment = envValue.FirstOrDefault() ?? "";

            Logger.LogDebug("Parsed query parameters: Filter={Filter}, Repo={Repo}, Env={Env}",
                currentStatusFilter, selectedRepository, selectedEnvironment);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to parse query parameters");
            // Continue with default values
        }
    }

    private async Task LoadDeployments()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            Logger.LogInformation("Loading deployments...");
            allDeployments = await StorageService.GetDeploymentsAsync();
            ApplyFilters();
            Logger.LogInformation("Loaded {DeploymentCount} deployments successfully", allDeployments.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load deployments");
            errorMessage = "Failed to load deployment data. Please check your connection and try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    #region Event Handlers

    private async Task HandleRepositoryChanged(string repository)
    {
        selectedRepository = repository;
        await OnFiltersChanged();
    }

    private async Task HandleEnvironmentChanged(string environment)
    {
        selectedEnvironment = environment;
        await OnFiltersChanged();
    }

    private async Task OnFiltersChanged()
    {
        currentPage = 1;
        ApplyFilters();
        UpdateUrl();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshData()
    {
        await LoadDeployments();
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    #endregion

    #region Filter and Search Logic

    private void ApplyFilters()
    {
        filteredDeployments = allDeployments.ToList();

        // Repository filter
        if (!string.IsNullOrEmpty(selectedRepository))
        {
            filteredDeployments = filteredDeployments.Where(d =>
                string.Equals(d.Repository, selectedRepository, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Environment filter
        if (!string.IsNullOrEmpty(selectedEnvironment))
        {
            filteredDeployments = filteredDeployments.Where(d =>
                string.Equals(d.Environment, selectedEnvironment, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Status filter
        if (!string.IsNullOrEmpty(currentStatusFilter))
        {
            if (currentStatusFilter == "pending")
            {
                filteredDeployments = filteredDeployments.Where(d =>
                    d.StatusCategory == "pending" || d.StatusCategory == "in_progress").ToList();
            }
            else
            {
                filteredDeployments = filteredDeployments.Where(d =>
                    string.Equals(d.StatusCategory, currentStatusFilter, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
        }

        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            var searchLower = searchTerm.ToLower();
            filteredDeployments = filteredDeployments.Where(d =>
                (d.Repository?.ToLower().Contains(searchLower) ?? false) ||
                (d.WorkflowDisplayName?.ToLower().Contains(searchLower) ?? false) ||
                (d.Branch?.ToLower().Contains(searchLower) ?? false) ||
                (d.CreatorLogin?.ToLower().Contains(searchLower) ?? false) ||
                (d.Environment?.ToLower().Contains(searchLower) ?? false)
            ).ToList();
        }

        ApplySort();
        CalculatePagination();
    }

    private void ApplySort()
    {
        filteredDeployments = sortField switch
        {
            "Repository" => sortAscending
                ? filteredDeployments.OrderBy(d => d.Repository).ToList()
                : filteredDeployments.OrderByDescending(d => d.Repository).ToList(),
            "Environment" => sortAscending
                ? filteredDeployments.OrderBy(d => d.Environment).ToList()
                : filteredDeployments.OrderByDescending(d => d.Environment).ToList(),
            "Status" => sortAscending
                ? filteredDeployments.OrderBy(d => d.StatusCategory).ToList()
                : filteredDeployments.OrderByDescending(d => d.StatusCategory).ToList(),
            "CreatedAt" => sortAscending
                ? filteredDeployments.OrderBy(d => d.CreatedAt).ToList()
                : filteredDeployments.OrderByDescending(d => d.CreatedAt).ToList(),
            _ => filteredDeployments.OrderByDescending(d => d.CreatedAt).ToList()
        };
    }

    private void CalculatePagination()
    {
        totalPages = (int)Math.Ceiling((double)filteredDeployments.Count / pageSize);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));

        var skip = (currentPage - 1) * pageSize;
        paginatedDeployments = filteredDeployments.Skip(skip).Take(pageSize).ToList();
    }

    private void SetStatusFilter(string filter)
    {
        currentStatusFilter = filter;
        currentPage = 1;
        ApplyFilters();
        UpdateUrl();
    }

    private void OnSearchChanged()
    {
        currentPage = 1;
        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        OnSearchChanged();
    }

    private void ClearAllFilters()
    {
        selectedRepository = "";
        selectedEnvironment = "";
        currentStatusFilter = "";
        searchTerm = "";
        currentPage = 1;
        ApplyFilters();
        UpdateUrl();
    }

    #endregion

    #region Sorting and Pagination

    private void ToggleSort(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = field == "CreatedAt" ? false : true;
        }
        ApplySort();
        CalculatePagination();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        var sortValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(sortValue))
        {
            var parts = sortValue.Split('_');
            if (parts.Length == 2)
            {
                sortField = parts[0];
                sortAscending = parts[1] == "asc";
                ApplySort();
                CalculatePagination();
            }
        }
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            CalculatePagination();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = Math.Max(1, Math.Min(page, totalPages));
        CalculatePagination();
    }

    #endregion

    #region Helper Methods

    private bool HasActiveFilters() =>
        !string.IsNullOrEmpty(selectedRepository) ||
        !string.IsNullOrEmpty(selectedEnvironment) ||
        !string.IsNullOrEmpty(currentStatusFilter) ||
        !string.IsNullOrEmpty(searchTerm);

    private int GetTotalCount() => filteredDeployments.Count;

    private int GetStatusCount(string status)
    {
        if (status == "pending")
            return filteredDeployments.Count(d => d.StatusCategory == "pending" || d.StatusCategory == "in_progress");
        return filteredDeployments.Count(d => string.Equals(d.StatusCategory, status, StringComparison.OrdinalIgnoreCase));
    }

    private string GetStateClass(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "pending" => "bg-warning",
        "in_progress" => "bg-info",
        "cancelled" => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStateIcon(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "check",
        "failure" => "x",
        "pending" => "clock",
        "in_progress" => "reload",
        "cancelled" => "ban",
        _ => "question-mark"
    };

    private void NavigateToDetails(string repository, string deploymentId)
    {
        Navigation.NavigateTo($"/deployments/{repository}/{deploymentId}");
    }

    private void UpdateUrl()
    {
        var queryParams = new Dictionary<string, object?>();

        if (!string.IsNullOrEmpty(currentStatusFilter))
            queryParams["filter"] = currentStatusFilter;

        if (!string.IsNullOrEmpty(selectedRepository))
            queryParams["repo"] = selectedRepository;

        if (!string.IsNullOrEmpty(selectedEnvironment))
            queryParams["env"] = selectedEnvironment;

        var url = Navigation.GetUriWithQueryParameters(queryParams);
        Navigation.NavigateTo(url, replace: true);
    }

    #endregion
}