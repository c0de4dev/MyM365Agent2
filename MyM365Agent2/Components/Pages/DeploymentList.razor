@page "/deployments"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using MyM365Agent2.Components
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/")'>
                            <i class="oi oi-home"></i> Dashboard
                        </button>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">GitHub Actions</li>
                </ol>
            </nav>
            
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">
                        <i class="oi oi-list-rich me-2"></i>
                        GitHub Actions History
                    </h2>
                    <p class="text-muted mb-0">Monitor and track all GitHub Action deployments across repositories</p>
                </div>
                <div>
                    <button class="btn btn-primary" @onclick="RefreshData">
                        <i class="oi oi-reload me-2"></i>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Repository and Environment Selector -->
    <RepoEnvironmentSelector 
        SelectedRepository="@selectedRepository"
        SelectedEnvironment="@selectedEnvironment"
        SelectedRepositoryChanged="@((string repo) => { selectedRepository = repo; })"
        SelectedEnvironmentChanged="@((string env) => { selectedEnvironment = env; })"
        OnSelectionChanged="@OnFiltersChanged" />

    <!-- Filters and Search -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Status Filter</label>
                            <div class="btn-group w-100" role="group">
                                <button class="btn @(currentStatusFilter == "" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => SetStatusFilter(""))">
                                    All (@GetTotalCount())
                                </button>
                                <button class="btn @(currentStatusFilter == "success" ? "btn-success" : "btn-outline-success")"
                                        @onclick="@(() => SetStatusFilter("success"))">
                                    Success (@GetStatusCount("success"))
                                </button>
                                <button class="btn @(currentStatusFilter == "failure" ? "btn-danger" : "btn-outline-danger")"
                                        @onclick="@(() => SetStatusFilter("failure"))">
                                    Failed (@GetStatusCount("failure"))
                                </button>
                                <button class="btn @(currentStatusFilter == "pending" ? "btn-warning" : "btn-outline-warning")"
                                        @onclick="@(() => SetStatusFilter("pending"))">
                                    Active (@GetStatusCount("pending"))
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Search</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="oi oi-magnifying-glass"></i>
                                </span>
                                <input type="text" class="form-control" 
                                       placeholder="Search workflows, branches, creators..."
                                       @bind="searchTerm" @onkeyup="OnSearchChanged" />
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                        <i class="oi oi-x"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <label class="form-label fw-bold mb-1">Sort By</label>
                            <select class="form-select form-select-sm" @onchange="OnSortChanged">
                                <option value="CreatedAt_desc">Latest First</option>
                                <option value="CreatedAt_asc">Oldest First</option>
                                <option value="Repository_asc">Repository A-Z</option>
                                <option value="Repository_desc">Repository Z-A</option>
                                <option value="Status_asc">Status</option>
                            </select>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">
                                Showing @Math.Min(pageSize, filteredDeployments.Count) of @filteredDeployments.Count
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading GitHub Actions...</span>
                </div>
                <p class="mt-3 text-muted">Loading deployment data...</p>
            </div>
        </div>
    }
    else if (!filteredDeployments.Any())
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info text-center">
                    <i class="oi oi-info mb-3" style="font-size: 3rem;"></i>
                    <h4>No GitHub Actions Found</h4>
                    <p class="mb-3">
                        @if (!string.IsNullOrEmpty(selectedRepository) || !string.IsNullOrEmpty(selectedEnvironment) || !string.IsNullOrEmpty(currentStatusFilter) || !string.IsNullOrEmpty(searchTerm))
                        {
                            <text>No deployments match your current filters. Try adjusting your search criteria.</text>
                        }
                        else
                        {
                            <text>No deployment data available. Connect your GitHub repositories to start monitoring actions.</text>
                        }
                    </p>
                    <button class="btn btn-primary" @onclick="ClearAllFilters">
                        <i class="oi oi-layers me-2"></i>
                        Clear All Filters
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Results -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="oi oi-code me-2"></i>
                                GitHub Action Runs
                                @if (filteredDeployments.Count != allDeployments.Count)
                                {
                                    <span class="badge bg-info ms-2">@filteredDeployments.Count filtered</span>
                                }
                            </h5>
                            <div class="d-flex align-items-center gap-2">
                                <select class="form-select form-select-sm" @onchange="OnPageSizeChanged" style="width: auto;">
                                    <option value="25">25 per page</option>
                                    <option value="50" selected>50 per page</option>
                                    <option value="100">100 per page</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th class="border-0" @onclick='() => ToggleSort("Repository")'>
                                            <div class="d-flex align-items-center">
                                                Repository
                                                @if (sortField == "Repository")
                                                {
                                                    <i class="oi oi-arrow-@(sortAscending ? "top" : "bottom") ms-2"></i>
                                                }
                                            </div>
                                        </th>
                                        <th class="border-0">Workflow</th>
                                        <th class="border-0">Environment</th>
                                        <th class="border-0" @onclick='() => ToggleSort("Status")'>
                                            <div class="d-flex align-items-center">
                                                Status
                                                @if (sortField == "Status")
                                                {
                                                    <i class="oi oi-arrow-@(sortAscending ? "top" : "bottom") ms-2"></i>
                                                }
                                            </div>
                                        </th>
                                        <th class="border-0">Branch/Run</th>
                                        <th class="border-0">Creator</th>
                                        <th class="border-0" @onclick='() => ToggleSort("CreatedAt")'>
                                            <div class="d-flex align-items-center">
                                                Created
                                                @if (sortField == "CreatedAt")
                                                {
                                                    <i class="oi oi-arrow-@(sortAscending ? "top" : "bottom") ms-2"></i>
                                                }
                                            </div>
                                        </th>
                                        <th class="border-0">Duration</th>
                                        <th class="border-0">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var deployment in paginatedDeployments)
                                    {
                                        <tr class="deployment-row">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="oi oi-code me-2 text-primary"></i>
                                                    <div>
                                                        <div class="fw-bold">@deployment.Repository</div>
                                                        @if (!string.IsNullOrEmpty(deployment.WorkflowRunIdDisplay) && deployment.WorkflowRunIdDisplay != "N/A")
                                                        {
                                                            <small class="text-muted">#@deployment.WorkflowRunIdDisplay</small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <div class="fw-medium">@deployment.WorkflowDisplayName</div>
                                                    @if (!string.IsNullOrEmpty(deployment.TriggerType))
                                                    {
                                                        <small class="text-muted">
                                                            <i class="oi oi-flash me-1"></i>
                                                            @deployment.TriggerType
                                                        </small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">
                                                    <i class="oi oi-globe me-1"></i>
                                                    @deployment.Environment
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetStateClass(deployment.StatusCategory)">
                                                    <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1"></i>
                                                    @deployment.DisplayStatus
                                                </span>
                                            </td>
                                            <td>
                                                <div>
                                                    @if (!string.IsNullOrEmpty(deployment.Branch))
                                                    {
                                                        <div>
                                                            <i class="oi oi-fork me-1"></i>
                                                            @deployment.Branch
                                                        </div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                                    {
                                                        <small class="text-muted">Run #@deployment.RunNumberDisplay</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="oi oi-person me-2"></i>
                                                    <div>
                                                        <div>@deployment.CreatorLogin</div>
                                                        @if (deployment.HasApprovalWorkflow)
                                                        {
                                                            <small class="text-info">
                                                                <i class="oi oi-shield"></i> Approval Required
                                                            </small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <div>@deployment.CreatedAt.ToString("MMM dd, HH:mm")</div>
                                                    <small class="text-muted">@deployment.CreatedAt.ToString("yyyy")</small>
                                                </div>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(deployment.FormattedDuration))
                                                {
                                                    <span class="badge bg-light text-dark">
                                                        <i class="oi oi-clock me-1"></i>
                                                        @deployment.FormattedDuration
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="d-flex gap-1">
                                                    @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                                    {
                                                        <a href="@deployment.WorkflowRunUrl" target="_blank" 
                                                           class="btn btn-sm btn-outline-primary" title="View on GitHub">
                                                            <i class="oi oi-external-link"></i>
                                                        </a>
                                                    }
                                                    <button class="btn btn-sm btn-primary"
                                                            @onclick="() => NavigateToDetails(deployment.Repository, deployment.RowKey)"
                                                            title="View Details">
                                                        <i class="oi oi-eye"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Pagination -->
                    @if (totalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="Deployment pagination">
                                <ul class="pagination pagination-sm justify-content-center mb-0">
                                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                            <i class="oi oi-chevron-left"></i>
                                        </button>
                                    </li>

                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                            <i class="oi oi-chevron-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                            <small class="text-muted d-block text-center mt-2">
                                Page @currentPage of @totalPages • @filteredDeployments.Count total results
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
    .deployment-row:hover {
        background-color: #f8f9fa;
    }
    
    .page-link {
        color: #6264a7;
        border-color: #e1dfdd;
    }
    
    .page-item.active .page-link {
        background-color: #6264a7;
        border-color: #6264a7;
    }
    
    .btn-group .btn {
        white-space: nowrap;
    }
    
    th[onclick] {
        cursor: pointer;
        user-select: none;
    }
    
    th[onclick]:hover {
        background-color: #f1f3f4;
    }
</style>

@code {
    private List<DeploymentState> allDeployments = new();
    private List<DeploymentState> filteredDeployments = new();
    private List<DeploymentState> paginatedDeployments = new();
    
    private string selectedRepository = "";
    private string selectedEnvironment = "";
    private string currentStatusFilter = "";
    private string searchTerm = "";
    private string sortField = "CreatedAt";
    private bool sortAscending = false;
    
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 50;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        // Get filters from query parameters
        var uri = new Uri(Navigation.Uri);
        var queryString = uri.Query;
        
        if (!string.IsNullOrEmpty(queryString))
        {
            // Simple query string parsing without System.Web dependency
            var queryParams = queryString.TrimStart('?').Split('&');
            foreach (var param in queryParams)
            {
                var keyValue = param.Split('=');
                if (keyValue.Length == 2)
                {
                    var key = Uri.UnescapeDataString(keyValue[0]);
                    var value = Uri.UnescapeDataString(keyValue[1]);
                    
                    switch (key.ToLower())
                    {
                        case "filter":
                            currentStatusFilter = value;
                            break;
                        case "repo":
                            selectedRepository = value;
                            break;
                        case "env":
                            selectedEnvironment = value;
                            break;
                    }
                }
            }
        }

        await LoadDeployments();
    }

    private async Task LoadDeployments()
    {
        isLoading = true;
        try
        {
            allDeployments = await StorageService.GetDeploymentsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading deployments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnFiltersChanged()
    {
        currentPage = 1;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private void ApplyFilters()
    {
        filteredDeployments = allDeployments.ToList();

        // Repository filter
        if (!string.IsNullOrEmpty(selectedRepository))
        {
            filteredDeployments = filteredDeployments.Where(d => d.Repository == selectedRepository).ToList();
        }

        // Environment filter
        if (!string.IsNullOrEmpty(selectedEnvironment))
        {
            filteredDeployments = filteredDeployments.Where(d => d.Environment == selectedEnvironment).ToList();
        }

        // Status filter
        if (!string.IsNullOrEmpty(currentStatusFilter))
        {
            if (currentStatusFilter == "pending")
            {
                filteredDeployments = filteredDeployments.Where(d => 
                    d.StatusCategory == "pending" || d.StatusCategory == "in_progress").ToList();
            }
            else
            {
                filteredDeployments = filteredDeployments.Where(d => d.StatusCategory == currentStatusFilter).ToList();
            }
        }

        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            var searchLower = searchTerm.ToLower();
            filteredDeployments = filteredDeployments.Where(d =>
                d.Repository.ToLower().Contains(searchLower) ||
                d.WorkflowDisplayName.ToLower().Contains(searchLower) ||
                d.Branch.ToLower().Contains(searchLower) ||
                d.CreatorLogin.ToLower().Contains(searchLower) ||
                d.Environment.ToLower().Contains(searchLower)
            ).ToList();
        }

        ApplySort();
        CalculatePagination();
    }

    private void ApplySort()
    {
        filteredDeployments = sortField switch
        {
            "Repository" => sortAscending
                ? filteredDeployments.OrderBy(d => d.Repository).ToList()
                : filteredDeployments.OrderByDescending(d => d.Repository).ToList(),
            "Environment" => sortAscending
                ? filteredDeployments.OrderBy(d => d.Environment).ToList()
                : filteredDeployments.OrderByDescending(d => d.Environment).ToList(),
            "Status" => sortAscending
                ? filteredDeployments.OrderBy(d => d.StatusCategory).ToList()
                : filteredDeployments.OrderByDescending(d => d.StatusCategory).ToList(),
            "CreatedAt" => sortAscending
                ? filteredDeployments.OrderBy(d => d.CreatedAt).ToList()
                : filteredDeployments.OrderByDescending(d => d.CreatedAt).ToList(),
            _ => filteredDeployments.OrderByDescending(d => d.CreatedAt).ToList()
        };
    }

    private void CalculatePagination()
    {
        totalPages = (int)Math.Ceiling((double)filteredDeployments.Count / pageSize);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        
        var skip = (currentPage - 1) * pageSize;
        paginatedDeployments = filteredDeployments.Skip(skip).Take(pageSize).ToList();
    }

    private void SetStatusFilter(string filter)
    {
        currentStatusFilter = filter;
        currentPage = 1;
        ApplyFilters();
    }

    private void OnSearchChanged()
    {
        currentPage = 1;
        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        OnSearchChanged();
    }

    private void ClearAllFilters()
    {
        selectedRepository = "";
        selectedEnvironment = "";
        currentStatusFilter = "";
        searchTerm = "";
        currentPage = 1;
        ApplyFilters();
    }

    private void ToggleSort(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = field == "CreatedAt" ? false : true;
        }
        ApplySort();
        CalculatePagination();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        var sortValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(sortValue))
        {
            var parts = sortValue.Split('_');
            sortField = parts[0];
            sortAscending = parts[1] == "asc";
            ApplySort();
            CalculatePagination();
        }
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            CalculatePagination();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = Math.Max(1, Math.Min(page, totalPages));
        CalculatePagination();
    }

    private async Task RefreshData()
    {
        await LoadDeployments();
    }

    private int GetTotalCount() => filteredDeployments.Count;
    private int GetStatusCount(string status)
    {
        if (status == "pending")
            return filteredDeployments.Count(d => d.StatusCategory == "pending" || d.StatusCategory == "in_progress");
        return filteredDeployments.Count(d => d.StatusCategory == status);
    }

    private string GetStateClass(string statusCategory)
    {
        return statusCategory?.ToLower() switch
        {
            "success" => "bg-success",
            "failure" => "bg-danger",
            "pending" => "bg-warning",
            "in_progress" => "bg-info",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStateIcon(string statusCategory)
    {
        return statusCategory?.ToLower() switch
        {
            "success" => "check",
            "failure" => "x",
            "pending" => "clock",
            "in_progress" => "reload",
            "cancelled" => "ban",
            _ => "question-mark"
        };
    }

    private void NavigateToDetails(string repository, string deploymentId)
    {
        Navigation.NavigateTo($"/deployments/{repository}/{deploymentId}");
    }
}