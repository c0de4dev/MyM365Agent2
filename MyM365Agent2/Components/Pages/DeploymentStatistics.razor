@using System.Linq
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@inject IAzureTableStorageService StorageService

<div class="row">
    @if (isLoading)
    {
        <div class="col-12 text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading statistics...</span>
            </div>
            <p class="mt-3 text-muted">Analyzing deployment data...</p>
        </div>
    }
    else
    {
        <!-- Total Deployments Card -->
        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-primary h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Total</h6>
                            <i class="oi oi-layers" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">@statistics["total"]</p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-graph me-1"></i>
                            Workflow executions
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Success Rate Card -->
        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-success h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Success Rate</h6>
                            <i class="oi oi-check" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">
                            @(
                                statistics["total"] > 0
                                    ? $"{(statistics["success"] * 100.0 / statistics["total"]):0.#}%"
                                    : "0%"
                            )
                        </p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-thumb-up me-1"></i>
                            @statistics["success"] successful
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Failed Deployments Card -->
        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-danger h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Failed</h6>
                            <i class="oi oi-x" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">@statistics["failure"]</p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-warning me-1"></i>
                            @(
                                statistics["total"] > 0
                                    ? $"{(statistics["failure"] * 100.0 / statistics["total"]):0.#}% failure rate"
                                    : "No failures recorded"
                            )
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Active Deployments Card -->
        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-info h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Active</h6>
                            <i class="oi oi-clock" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">
                            @(statistics["pending"] + statistics["in_progress"])
                        </p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-reload me-1"></i>
                            @statistics["pending"] pending, @statistics["in_progress"] running
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Job Performance Cards -->
        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-warning h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Total Jobs</h6>
                            <i class="oi oi-cog" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">@totalJobs</p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-task me-1"></i>
                            Individual job executions
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-secondary h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Job Success</h6>
                            <i class="oi oi-target" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">@($"{jobSuccessRate:F1}%")</p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-thumb-up me-1"></i>
                            @successfulJobs successful jobs
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-dark h-100 hover-scale">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Avg Duration</h6>
                            <i class="oi oi-pulse" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">@averageDuration</p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-clock me-1"></i>
                            Per workflow execution
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-lg-6 col-md-6 mb-4">
            <div class="card text-white bg-gradient h-100 hover-scale" style="background: linear-gradient(135deg, #6c757d, #495057);">
                <div class="card-body d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0 text-uppercase fw-bold">Workflows</h6>
                            <i class="oi oi-layers" style="font-size: 1.5rem; opacity: 0.8;"></i>
                        </div>
                        <p class="card-text display-6 mb-2">@totalWorkflows</p>
                        <small style="color: rgba(255, 255, 255, 0.75);">
                            <i class="oi oi-code me-1"></i>
                            Unique workflows
                        </small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!isLoading && statistics["total"] > 0)
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Performance Insights</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 border-end pe-3">
                            <h6 class="text-muted">Pipeline Health</h6>
                            <div class="d-flex align-items-center">
                                <span class="@GetHealthClass() me-2">@GetHealthStatus()</span>
                                <small class="text-muted">
                                    Based on @($"{GetSuccessRate():F1}%") success rate
                                </small>
                            </div>
                        </div>
                        <div class="col-md-4 border-end pe-3">
                            <h6 class="text-muted">Job Efficiency</h6>
                            <div class="d-flex align-items-center">
                                <span class="@GetJobEfficiencyClass() me-2">@GetJobEfficiencyStatus()</span>
                                <small class="text-muted">
                                    @($"{jobSuccessRate:F1}%") job success rate
                                </small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <h6 class="text-muted">Activity Level</h6>
                            <div class="d-flex align-items-center">
                                <span class="@GetActivityClass() me-2">@GetActivityLevel()</span>
                                <small class="text-muted">
                                    @(statistics["pending"] + statistics["in_progress"]) active deployments
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (environmentStats != null && environmentStats.Any())
    {
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Top Environments</h6>
                    </div>
                    <div class="card-body">
                        @foreach (var env in environmentStats.OrderByDescending(e => e.Value["total"]).Take(5))
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <span class="badge bg-info me-2">@env.Key</span>
                                    <small class="text-muted">@env.Value["total"] deployments</small>
                                </div>
                                <div>
                                    @{
                                        var envSuccessRate = env.Value["total"] > 0 ? (env.Value["success"] * 100.0 / env.Value["total"]) : 0;
                                    }
                                    <span class="badge @(envSuccessRate >= 90 ? "bg-success" : envSuccessRate >= 70 ? "bg-warning" : "bg-danger")">
                                        @($"{envSuccessRate:F1}%")
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Top Repositories</h6>
                    </div>
                    <div class="card-body">
                        @foreach (var repo in repositoryStats.OrderByDescending(r => r.Value["total"]).Take(5))
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <strong>@repo.Key</strong>
                                    <br />
                                    <small class="text-muted">@repo.Value["total"] deployments</small>
                                </div>
                                <div>
                                    @{
                                        var repoSuccessRate = repo.Value["total"] > 0 ? (repo.Value["success"] * 100.0 / repo.Value["total"]) : 0;
                                    }
                                    <span class="badge @(repoSuccessRate >= 90 ? "bg-success" : repoSuccessRate >= 70 ? "bg-warning" : "bg-danger")">
                                        @($"{repoSuccessRate:F1}%")
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

<style>
    .border-end { border-right: 1px solid #e1dfdd; }
    .pe-3 { padding-right: 1rem; }
    .bg-gradient {
        background: linear-gradient(135deg, #6c757d, #495057) !important;
    }
</style>

@code {
    private Dictionary<string,int> statistics = new();
    private Dictionary<string,Dictionary<string,int>> environmentStats = new();
    private Dictionary<string,Dictionary<string,int>> repositoryStats = new();
    private bool isLoading = true;

    // Job performance metrics
    private int totalJobs = 0;
    private int successfulJobs = 0;
    private double jobSuccessRate = 0;
    private string averageDuration = "N/A";
    private int totalWorkflows = 0;

    protected override async Task OnInitializedAsync()
        => await LoadStatistics();

    private async Task LoadStatistics()
    {
        isLoading = true;
        try
        {
            // OPTIMIZED: Use time-filtered statistics
            statistics = await StorageService.GetDeploymentStatisticsAsync(daysBack: 7);
            environmentStats = await StorageService.GetEnvironmentStatisticsAsync();
            repositoryStats = await StorageService.GetRepositoryStatisticsAsync();

            // Calculate job performance metrics
            await CalculateJobMetrics();
        }
        catch
        {
            // Fallback to zeros
            statistics = new()
            {
                ["success"] = 0,
                ["failure"] = 0,
                ["pending"] = 0,
                ["in_progress"] = 0,
                ["cancelled"] = 0,
                ["total"] = 0
            };
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CalculateJobMetrics()
    {
        try
        {
            var allDeployments = await StorageService.GetDeploymentsAsync(repository: null, daysBack: 7);
            var deploymentsWithJobs = allDeployments.Where(d => !string.IsNullOrEmpty(d.JobHistory)).ToList();


            if (deploymentsWithJobs.Any())
            {
                var jobSummaries = deploymentsWithJobs.Select(d => d.GetJobSummary()).ToList();
                
                totalJobs = jobSummaries.Sum(j => j.TotalJobs);
                successfulJobs = jobSummaries.Sum(j => j.SuccessfulJobs);
                jobSuccessRate = totalJobs > 0 ? Math.Round((double)successfulJobs / totalJobs * 100, 1) : 0;

                var durations = deploymentsWithJobs
                    .Where(d => d.Duration.HasValue)
                    .Select(d => d.Duration.Value.TotalMinutes)
                    .ToList();

                if (durations.Any())
                {
                    var avgMinutes = durations.Average();
                    if (avgMinutes >= 60)
                        averageDuration = $"{avgMinutes / 60:F1}h";
                    else
                        averageDuration = $"{avgMinutes:F1}m";
                }

            }
        }
        catch
        {
            // Use defaults
        }
    }

    private double GetSuccessRate()
        => statistics["total"] == 0
            ? 0
            : Math.Round(statistics["success"] * 100.0 / statistics["total"], 1);

    private double GetFailureRate()
        => statistics["total"] == 0
            ? 0
            : Math.Round(statistics["failure"] * 100.0 / statistics["total"], 1);

    private string GetHealthStatus()
    {
        if (statistics["total"] == 0) return "No Data";
        var successRate = GetSuccessRate();
        var failureRate = GetFailureRate();
        return (successRate, failureRate) switch
        {
            (>= 95, < 2)  => "Excellent",
            (>= 90, < 5)  => "Very Good",
            (>= 80, < 10) => "Good",
            (>= 70, < 15) => "Fair",
            (>= 50, < 25) => "Poor",
            _             => "Critical"
        };
    }

    private string GetHealthClass()
    {
        if (statistics["total"] == 0) return "text-muted";
        var successRate = GetSuccessRate();
        var failureRate = GetFailureRate();
        return (successRate, failureRate) switch
        {
            (>= 95, < 2)  => "text-success",
            (>= 90, < 5)  => "text-success",
            (>= 80, < 10) => "text-info",
            (>= 70, < 15) => "text-warning",
            (>= 50, < 25) => "text-warning",
            _             => "text-danger"
        };
    }

    private string GetJobEfficiencyStatus()
    {
        return jobSuccessRate switch
        {
            >= 95 => "Excellent",
            >= 90 => "Very Good",
            >= 80 => "Good",
            >= 70 => "Fair",
            >= 50 => "Poor",
            _ => "Critical"
        };
    }

    private string GetJobEfficiencyClass()
    {
        return jobSuccessRate switch
        {
            >= 95 => "text-success",
            >= 90 => "text-success",
            >= 80 => "text-info",
            >= 70 => "text-warning",
            >= 50 => "text-warning",
            _ => "text-danger"
        };
    }

    private string GetActivityLevel()
    {
        var activeCount = statistics["pending"] + statistics["in_progress"];
        return activeCount switch
        {
            0 => "Idle",
            < 5 => "Low",
            < 15 => "Moderate",
            < 30 => "High",
            _ => "Very High"
        };
    }

    private string GetActivityClass()
    {
        var activeCount = statistics["pending"] + statistics["in_progress"];
        return activeCount switch
        {
            0 => "text-muted",
            < 5 => "text-info",
            < 15 => "text-primary",
            < 30 => "text-warning",
            _ => "text-danger"
        };
    }
}