@page "/deployments/{Repository}/{DeploymentId}"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using System.Text.Json
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/tab")'>
                            <i class="oi oi-home"></i> Home
                        </button>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">@Repository</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading deployment details...</span>
                </div>
                <p class="mt-3 text-muted">Loading deployment information...</p>
            </div>
        </div>
    }
    else if (deployment == null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="oi oi-warning me-2"></i>
                    <strong>Deployment not found.</strong>
                    <p class="mb-0 mt-2">The deployment you're looking for doesn't exist or may have been removed.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Header Card -->
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1">
                                    <i class="oi oi-code me-2"></i>
                                    @deployment.Repository
                                </h4>
                                <p class="mb-0 text-muted">@deployment.WorkflowDisplayName</p>
                            </div>
                            <div class="text-end">
                                <span class="badge @GetStateClass(deployment.StatusCategory) fs-6">
                                    <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1"></i>
                                    @deployment.DisplayStatus
                                </span>
                                @if (IsProtectionRuleEntry())
                                {
                                    <span class="badge bg-info ms-2">
                                        <i class="oi oi-shield me-1"></i>
                                        Protection Rule
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="row">
                                    @foreach (var env in deployment.GetEnvironmentStatuses())
                                    {
                                        <div class="col-sm-6 mb-3">
                                            <strong>Environment (@env.Environment):</strong>
                                            <span class="badge @GetStateClassForStatus(env.Status) ms-2">@env.Status</span>
                                            @if (env.LastUpdate.HasValue)
                                            {
                                                <br />
                                                <small class="text-muted">Updated: @env.LastUpdate.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                            }
                                        </div>
                                    }
                                    <div class="col-sm-6 mb-3">
                                        <strong>Branch/Ref:</strong>
                                        <span class="ms-2">
                                            <i class="oi oi-fork me-1"></i>
                                            @deployment.Branch
                                        </span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <strong>Triggered By:</strong>
                                        <span class="ms-2">
                                            <i class="oi oi-person me-1"></i>
                                            @deployment.CreatorLogin
                                        </span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <strong>Trigger Event:</strong>
                                        <span class="badge bg-secondary ms-2">@deployment.TriggerType</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-md-end">
                                    @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                    {
                                        <a href="@deployment.WorkflowRunUrl" target="_blank" class="btn btn-primary me-2 mb-2">
                                            <i class="oi oi-external-link me-1"></i>
                                            View Run
                                        </a>
                                    }
                                    @if (!string.IsNullOrEmpty(deployment.WorkflowUrl))
                                    {
                                        <a href="@deployment.WorkflowUrl" target="_blank" class="btn btn-outline-primary mb-2">
                                            <i class="oi oi-code me-1"></i>
                                            Workflow File
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Approval Section -->
        @if (HasPendingApprovals())
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-warning">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">
                                <i class="oi oi-shield me-2"></i>
                                Deployment Approvals Required
                            </h5>
                        </div>
                        <div class="card-body">
                            @foreach (var envApproval in pendingApprovals.OrderBy(e => e.Environment))
                            {
                                <div class="mb-4 pb-4 @(envApproval != pendingApprovals.Last() ? "border-bottom" : "")">
                                    <h6 class="mb-3">
                                        <span class="badge bg-info me-2">@envApproval.Environment</span>
                                        Environment Approvals
                                    </h6>

                                    @* Environment Reviewer Approvals *@
                                    @if (envApproval.ReviewerApprovals.Any())
                                    {
                                        foreach (var reviewerApproval in envApproval.ReviewerApprovals)
                                        {
                                            <div class="card mb-3">
                                                <div class="card-header bg-light">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <div>
                                                            <i class="oi oi-people me-2"></i>
                                                            <strong>Environment Reviewers</strong>
                                                        </div>
                                                        <small class="text-muted">
                                                            Requested: @reviewerApproval.RequestedAt.ToString("yyyy-MM-dd HH:mm")
                                                        </small>
                                                    </div>
                                                </div>
                                                <div class="card-body">
                                                    <div class="row">
                                                        <div class="col-md-8">
                                                            @if (!string.IsNullOrEmpty(reviewerApproval.Description))
                                                            {
                                                                <p class="mb-3">
                                                                    <i class="oi oi-info me-2 text-muted"></i>
                                                                    @reviewerApproval.Description
                                                                </p>
                                                            }

                                                            @* Pending Reviewers *@
                                                            @if (reviewerApproval.PendingReviewers.Any())
                                                            {
                                                                <div class="mb-3">
                                                                    <strong class="text-warning">
                                                                        <i class="oi oi-clock me-1"></i>
                                                                        Awaiting Review From:
                                                                    </strong>
                                                                    <div class="mt-2">
                                                                        @foreach (var reviewer in reviewerApproval.PendingReviewers)
                                                                        {
                                                                            <span class="badge bg-warning text-dark me-2 mb-1">
                                                                                <i class="oi oi-person me-1"></i>@reviewer
                                                                            </span>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }

                                                            @* Approved Reviewers *@
                                                            @if (reviewerApproval.Responses.Any())
                                                            {
                                                                <div class="mb-2">
                                                                    <strong class="text-muted">Review History:</strong>
                                                                    <ul class="list-unstyled mt-2">
                                                                        @foreach (var response in reviewerApproval.Responses.OrderByDescending(r => r.ApprovedAt))
                                                                        {
                                                                            <li class="mb-2">
                                                                                <span class="badge @GetStateClassForStatus(response.State) me-2">
                                                                                    @response.State
                                                                                </span>
                                                                                <strong>@response.Name</strong>
                                                                                <small class="text-muted">
                                                                                    - @response.ApprovedAt.ToString("yyyy-MM-dd HH:mm")
                                                                                </small>
                                                                                @if (!string.IsNullOrEmpty(response.Comment))
                                                                                {
                                                                                    <br />
                                                                                    <small class="text-muted ms-4">
                                                                                        <i class="oi oi-chat me-1"></i>@response.Comment
                                                                                    </small>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            }
                                                        </div>
                                                        <div class="col-md-4">
                                                            @if (reviewerApproval.PendingReviewers.Any())
                                                            {
                                                                <div class="d-grid gap-2">
                                                                    <button class="btn btn-success"
                                                                            @onclick='() => ShowReviewerApprovalModal(envApproval.Environment, true)'
                                                                            disabled="@isProcessingApproval">
                                                                        <i class="oi oi-check me-2"></i>
                                                                        Approve
                                                                    </button>
                                                                    <button class="btn btn-danger"
                                                                            @onclick='() => ShowReviewerApprovalModal(envApproval.Environment, false)'
                                                                            disabled="@isProcessingApproval">
                                                                        <i class="oi oi-x me-2"></i>
                                                                        Reject
                                                                    </button>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="alert alert-success mb-0">
                                                                    <i class="oi oi-check me-2"></i>
                                                                    All reviewers responded
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }

                                    @* Custom Protection Rule *@
                                    @if (envApproval.ProtectionRule != null)
                                    {
                                        <div class="card mb-3 border-primary">
                                            <div class="card-header bg-primary text-white">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <i class="oi oi-shield me-2"></i>
                                                        <strong>Custom Protection Rule</strong>
                                                    </div>
                                                    <small>
                                                        Triggered: @envApproval.ProtectionRule.RequestedAt.ToString("yyyy-MM-dd HH:mm")
                                                    </small>
                                                </div>
                                            </div>
                                            <div class="card-body">
                                                <div class="row">
                                                    <div class="col-md-8">
                                                        <p class="mb-2">
                                                            <i class="oi oi-info me-2 text-muted"></i>
                                                            @envApproval.ProtectionRule.Description
                                                        </p>
                                                        <p class="mb-2">
                                                            <strong>Status:</strong>
                                                            <span class="badge bg-warning text-dark ms-2">
                                                                @envApproval.ProtectionRule.State
                                                            </span>
                                                        </p>
                                                        @if (!string.IsNullOrEmpty(envApproval.ProtectionRule.CallbackUrl))
                                                        {
                                                            <p class="mb-0">
                                                                <small class="text-muted">
                                                                    <i class="oi oi-link-intact me-1"></i>
                                                                    Callback URL: <code class="text-break">@envApproval.ProtectionRule.CallbackUrl</code>
                                                                </small>
                                                            </p>
                                                        }
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="alert alert-info mb-0">
                                                            <i class="oi oi-info me-2"></i>
                                                            <small>
                                                                This protection rule must be approved through the connected GitHub App.
                                                            </small>
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(envApproval.ProtectionRule.CallbackUrl))
                                                        {
                                                            <button class="btn btn-outline-primary btn-sm mt-2 w-100"
                                                                    @onclick='() => OpenProtectionRuleCallback(envApproval.ProtectionRule.CallbackUrl)'>
                                                                <i class="oi oi-external-link me-1"></i>
                                                                View in GitHub
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Main Content -->
        <div class="row">
            <!-- Left Column - Details -->
            <div class="col-lg-8">
                <!-- Deployment Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="oi oi-info me-2"></i>
                            Deployment Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Repository:</dt>
                                    <dd class="col-sm-7">@deployment.Repository</dd>

                                    <dt class="col-sm-5">Status:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge @GetStateClass(deployment.StatusCategory)">@deployment.DisplayStatus</span>
                                    </dd>

                                    <dt class="col-sm-5">Workflow:</dt>
                                    <dd class="col-sm-7">@deployment.WorkflowDisplayName</dd>

                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                    {
                                        <dt class="col-sm-5">Run Number:</dt>
                                        <dd class="col-sm-7">#@deployment.RunNumberDisplay</dd>
                                    }

                                    @if (!string.IsNullOrEmpty(deployment.DeploymentIdDisplay) && deployment.DeploymentIdDisplay != "N/A")
                                    {
                                        <dt class="col-sm-5">Deployment ID:</dt>
                                        <dd class="col-sm-7">@deployment.DeploymentIdDisplay</dd>
                                    }

                                    <dt class="col-sm-5">Entry Type:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge @(IsProtectionRuleEntry() ? "bg-info" : "bg-primary")">
                                            @(IsProtectionRuleEntry() ? "Protection Rule" : "Deployment")
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Created:</dt>
                                    <dd class="col-sm-7">@deployment.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                                    <dt class="col-sm-5">Last Updated:</dt>
                                    <dd class="col-sm-7">@deployment.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                                    @if (deployment.RunStartedAtDateTime.HasValue)
                                    {
                                        <dt class="col-sm-5">Started:</dt>
                                        <dd class="col-sm-7">@deployment.RunStartedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                                    }

                                    @if (!string.IsNullOrEmpty(deployment.FormattedDuration) && deployment.FormattedDuration != "N/A")
                                    {
                                        <dt class="col-sm-5">Duration:</dt>
                                        <dd class="col-sm-7">
                                            <i class="oi oi-clock me-1"></i>
                                            @deployment.FormattedDuration
                                        </dd>
                                    }

                                    <dt class="col-sm-5">Event Type:</dt>
                                    <dd class="col-sm-7">@deployment.EventType</dd>

                                    <dt class="col-sm-5">Trigger:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge bg-secondary">@deployment.TriggerType</span>
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(deployment.Note))
                        {
                            <div class="mt-3">
                                <h6>Notes:</h6>
                                <div class="alert alert-light">
                                    <i class="oi oi-note me-2"></i>
                                    @deployment.Note
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Related Deployment Entry -->
                @if (relatedDeployment != null)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-link-intact me-2"></i>
                                Related @(IsProtectionRuleEntry() ? "Deployment" : "Protection Rule") Entry
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">@relatedDeployment.WorkflowDisplayName</h6>
                                    <p class="mb-2 text-muted">
                                        Status: <span class="badge @GetStateClass(relatedDeployment.StatusCategory)">@relatedDeployment.DisplayStatus</span>
                                    </p>
                                    <small class="text-muted">
                                        Updated: @relatedDeployment.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                                    </small>
                                </div>
                                <div>
                                    <button class="btn btn-outline-primary"
                                            @onclick="() => NavigateToRelated()">
                                        <i class="oi oi-eye me-1"></i>
                                        View Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Job Execution Details -->
                @if (!string.IsNullOrEmpty(deployment.JobHistory))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-cog me-2"></i>
                                Job Execution Details
                            </h5>
                        </div>
                        <div class="card-body">
                            @{
                                var jobSummary = deployment.GetJobSummary();
                                var jobs = ParseJobHistory(deployment.JobHistory);
                            }
                            <div class="row mb-4">
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Total Jobs</h6>
                                    <h4>@jobSummary.TotalJobs</h4>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Success Rate</h6>
                                    <h4 class="text-success">@($"{jobSummary.SuccessRate:F1}%")</h4>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Failed Jobs</h6>
                                    <h4 class="text-danger">@jobSummary.FailedJobs</h4>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Total Duration</h6>
                                    <h4>@jobSummary.FormattedDuration</h4>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Job Name</th>
                                            <th>Status</th>
                                            <th>Conclusion</th>
                                            <th>Duration</th>
                                            <th>Runner</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var job in jobs)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="text-truncate" style="max-width: 300px;" title="@job.name">
                                                        @job.name
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge @GetJobStatusClass(job.status)">@job.status</span>
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(job.conclusion))
                                                    {
                                                        <span class="badge @GetJobConclusionClass(job.conclusion)">@job.conclusion</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (job.duration_seconds.HasValue)
                                                    {
                                                        @TimeSpan.FromSeconds(job.duration_seconds.Value).ToString(@"hh\:mm\:ss")
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td><small>@job.runner_name</small></td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(job.html_url))
                                                    {
                                                        <a href="@job.html_url" target="_blank" class="btn btn-sm btn-outline-primary">
                                                            <i class="oi oi-external-link"></i>
                                                        </a>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

                <!-- Environment Status History -->
                @if (!string.IsNullOrEmpty(deployment.StatusHistory))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-clock me-2"></i>
                                Environment Status History
                            </h5>
                        </div>
                        <div class="card-body">
                            @{
                                var statusItems = ParseStatusHistory(deployment.StatusHistory);
                            }
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Type</th>
                                            <th>Environment</th>
                                            <th>Status</th>
                                            <th>Creator</th>
                                            <th>Updated At</th>
                                            <th>Description</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var status in statusItems.OrderByDescending(s => s.UpdatedAtDateTime))
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge @GetTypeClass(status.Type)">
                                                        @GetTypeDisplay(status.Type)
                                                    </span>
                                                </td>
                                                <td><span class="badge bg-info">@status.Environment</span></td>
                                                <td><span class="badge @GetStateClassForStatus(status.State)">@status.State</span></td>
                                                <td>@status.Creator</td>
                                                <td>@status.UpdatedAtDateTime?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(status.Description))
                                                    {
                                                        <small class="text-muted">@status.Description</small>
                                                    }
                                                    else if (status.ReviewersNames?.Any() == true)
                                                    {
                                                        <small class="text-muted">Reviewers: @string.Join(", ", status.ReviewersNames)</small>
                                                    }
                                                    else if (!string.IsNullOrEmpty(status.Comment))
                                                    {
                                                        <small class="text-muted">@status.Comment</small>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(status.LogUrl))
                                                    {
                                                        <a href="@status.LogUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                                                            <i class="oi oi-external-link me-1"></i>Logs
                                                        </a>
                                                    }
                                                    else if (!string.IsNullOrEmpty(status.CallbackUrl))
                                                    {
                                                        <a href="@status.CallbackUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                                                            <i class="oi oi-external-link me-1"></i>Callback
                                                        </a>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

                <!-- Deployment History -->
                @if (!string.IsNullOrEmpty(deployment.DeploymentHistory))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-layers me-2"></i>
                                Deployment History
                            </h5>
                        </div>
                        <div class="card-body">
                            @{
                                var historyItems = ParseDeploymentHistory(deployment.DeploymentHistory);
                            }
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Environment</th>
                                            <th>Creator</th>
                                            <th>Branch/Ref</th>
                                            <th>Created</th>
                                            <th>Updated</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var info in historyItems)
                                        {
                                            <tr>
                                                <td><span class="badge bg-info">@info.Environment</span></td>
                                                <td>@info.Creator</td>
                                                <td><i class="oi oi-fork me-1"></i>@info.Ref</td>
                                                <td>@info.CreatedAtDateTime?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                <td>@info.UpdatedAtDateTime?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Right Column - Quick Actions & Metadata -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-header"><h6 class="mb-0"><i class="oi oi-dashboard me-2"></i>Quick Actions</h6></div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                            {
                                <a href="@deployment.WorkflowRunUrl" target="_blank" class="btn btn-primary">
                                    <i class="oi oi-external-link me-2"></i>View Workflow Run
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(deployment.WorkflowUrl))
                            {
                                <a href="@deployment.WorkflowUrl" target="_blank" class="btn btn-outline-primary">
                                    <i class="oi oi-code me-2"></i>View Workflow File
                                </a>
                            }
                            @if (relatedDeployment != null)
                            {
                                <button class="btn btn-outline-info" @onclick="NavigateToRelated">
                                    <i class="oi oi-link-intact me-2"></i>View @(IsProtectionRuleEntry() ? "Deployment" : "Protection Rule")
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header"><h6 class="mb-0"><i class="oi oi-tag me-2"></i>Metadata</h6></div>
                    <div class="card-body">
                        <dl>
                            <dt>Row Key:</dt>
                            <dd><code>@deployment.RowKey</code></dd>
                            @if (!string.IsNullOrEmpty(deployment.WorkflowRunIdDisplay) && deployment.WorkflowRunIdDisplay != "N/A")
                            {
                                <dt>Workflow Run ID:</dt>
                                <dd><code>@deployment.WorkflowRunIdDisplay</code></dd>
                            }
                            @if (!string.IsNullOrEmpty(deployment.WorkflowPath))
                            {
                                <dt>Workflow Path:</dt>
                                <dd><code>@deployment.WorkflowPath</code></dd>
                            }
                            <dt>Event Type:</dt>
                            <dd><code>@deployment.EventType</code></dd>
                            <dt>Last Modified:</dt>
                            <dd>@deployment.Timestamp?.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div class="row mt-4">
            <div class="col-12">
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="oi oi-arrow-left me-2"></i>Back to Deployments
                </button>
            </div>
        </div>
    }
</div>

<!-- Approval Modal -->
@if (showApprovalModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (isApproving)
                        {
                            <i class="oi oi-check me-2 text-success"></i>
                            <text>Approve Deployment</text>
                        }
                        else
                        {
                            <i class="oi oi-x me-2 text-danger"></i>
                            <text>Reject Deployment</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideApprovalModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Repository:</strong> @deployment.Repository<br />
                        <strong>Environment:</strong> <span class="badge bg-info">@currentApprovalEnvironment</span><br />
                        <strong>Workflow:</strong> @deployment.WorkflowDisplayName<br />
                        <strong>Requested by:</strong> @deployment.CreatorLogin
                    </div>

                    <div class="mb-3">
                        <label for="approverName" class="form-label">
                            Your Name/Username: <span class="text-danger">*</span>
                        </label>
                        <input type="text" class="form-control" id="approverName" @bind="approverName"
                               placeholder="Enter your name or username" />
                        <small class="text-muted">Must match one of the pending reviewers</small>
                    </div>

                    <div class="mb-3">
                        <label for="approvalCommentInput" class="form-label">Comment:</label>
                        <textarea class="form-control" id="approvalCommentInput" rows="3" @bind="approvalCommentInput"
                                  placeholder="@(isApproving ? "Add approval notes..." : "Provide rejection reason...")"></textarea>
                    </div>

                    @if (!string.IsNullOrEmpty(approvalError))
                    {
                        <div class="alert alert-danger">
                            <i class="oi oi-warning me-2"></i>
                            @approvalError
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideApprovalModal" disabled="@isProcessingApproval">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn @(isApproving ? "btn-success" : "btn-danger")"
                            @onclick="ProcessReviewerApproval"
                            disabled="@(isProcessingApproval || string.IsNullOrWhiteSpace(approverName))">
                        @if (isProcessingApproval)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @if (isApproving)
                        {
                            <i class="oi oi-check me-2"></i>
                            <text>Approve</text>
                        }
                        else
                        {
                            <i class="oi oi-x me-2"></i>
                            <text>Reject</text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Repository { get; set; }
    [Parameter] public string DeploymentId { get; set; }

    private DeploymentState deployment;
    private DeploymentState relatedDeployment;
    private bool isLoading = true;

    // Approval functionality
    private bool showApprovalModal = false;
    private bool isApproving = false;
    private bool isProcessingApproval = false;
    private string approverName = "";
    private string currentApprovalEnvironment = "";
    private string approvalCommentInput = "";
    private string approvalError = "";

    // Enhanced approval tracking
    private List<EnvironmentApprovalInfo> pendingApprovals = new();

    // Helper classes for approval tracking
    public class EnvironmentApprovalInfo
    {
        public string Environment { get; set; }
        public List<ReviewerApproval> ReviewerApprovals { get; set; } = new();
        public ProtectionRuleApproval ProtectionRule { get; set; }
    }

    public class ReviewerApproval
    {
        public string Description { get; set; }
        public List<string> PendingReviewers { get; set; } = new();
        public List<ApproverInfo> Responses { get; set; } = new();
        public DateTime RequestedAt { get; set; }
    }

    public class ApproverInfo
    {
        public string Name { get; set; }
        public string State { get; set; }
        public string Comment { get; set; }
        public DateTime ApprovedAt { get; set; }
    }

    public class ProtectionRuleApproval
    {
        public string Description { get; set; }
        public string CallbackUrl { get; set; }
        public string State { get; set; }
        public DateTime RequestedAt { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDeployment();
        await LoadRelatedDeployment();
        ProcessApprovalRequests();
    }

    private async Task LoadDeployment()
    {
        isLoading = true;
        try
        {
            deployment = await StorageService.GetDeploymentAsync(Repository, DeploymentId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading deployment: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadRelatedDeployment()
    {
        if (deployment == null) return;

        try
        {
            var workflowRunId = GetWorkflowRunIdFromRowKey(deployment.RowKey);
            if (!string.IsNullOrEmpty(workflowRunId))
            {
                bool getProtectionRule = !IsProtectionRuleEntry();
                relatedDeployment = await StorageService.GetRelatedDeploymentAsync(Repository, workflowRunId, getProtectionRule);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading related deployment: {ex.Message}");
        }
    }

    private void ProcessApprovalRequests()
    {
        if (deployment == null || string.IsNullOrEmpty(deployment.StatusHistory))
            return;

        var statusItems = ParseStatusHistory(deployment.StatusHistory);
        var envGroups = statusItems.GroupBy(s => s.Environment);

        pendingApprovals = new List<EnvironmentApprovalInfo>();

        foreach (var envGroup in envGroups)
        {
            var envInfo = new EnvironmentApprovalInfo { Environment = envGroup.Key };

            // Process review requests
            var reviewRequests = envGroup
                .Where(s => s.Type == "ReviewRequest")
                .OrderByDescending(s => s.UpdatedAtDateTime)
                .ToList();

            var approverResponses = envGroup
                .Where(s => s.Type == "ApproverResponse")
                .OrderByDescending(s => s.UpdatedAtDateTime)
                .ToList();

            foreach (var request in reviewRequests)
            {
                if (request.State?.ToLower() != "pending") continue;

                var reviewerApproval = new ReviewerApproval
                {
                    Description = request.Description,
                    RequestedAt = request.UpdatedAtDateTime ?? DateTime.UtcNow,
                    PendingReviewers = new List<string>(request.ReviewersNames ?? new List<string>())
                };

                // Match responses to this request
                foreach (var response in approverResponses)
                {
                    if (response.UpdatedAtDateTime >= request.UpdatedAtDateTime)
                    {
                        reviewerApproval.Responses.Add(new ApproverInfo
                        {
                            Name = response.ApproverName,
                            State = response.State,
                            Comment = response.Comment,
                            ApprovedAt = response.UpdatedAtDateTime ?? DateTime.UtcNow
                        });

                        reviewerApproval.PendingReviewers.Remove(response.ApproverName);
                    }
                }

                if (reviewerApproval.PendingReviewers.Any() || reviewerApproval.Responses.Any())
                {
                    envInfo.ReviewerApprovals.Add(reviewerApproval);
                }
            }

            // Process protection rule requests
            var protectionRule = envGroup
                .Where(s => s.Type == "ProtectionRuleRequest" && s.State?.ToLower() == "pending")
                .OrderByDescending(s => s.UpdatedAtDateTime)
                .FirstOrDefault();

            if (protectionRule != null)
            {
                envInfo.ProtectionRule = new ProtectionRuleApproval
                {
                    Description = protectionRule.Description,
                    CallbackUrl = protectionRule.CallbackUrl,
                    State = protectionRule.State,
                    RequestedAt = protectionRule.UpdatedAtDateTime ?? DateTime.UtcNow
                };
            }

            if (envInfo.ReviewerApprovals.Any() || envInfo.ProtectionRule != null)
            {
                pendingApprovals.Add(envInfo);
            }
        }
    }

    private bool HasPendingApprovals() => pendingApprovals.Any();

    private bool IsProtectionRuleEntry() => deployment?.RowKey?.Contains("_protection_rule") == true;

    private string GetWorkflowRunIdFromRowKey(string rowKey)
    {
        if (string.IsNullOrEmpty(rowKey)) return null;

        if (rowKey.Contains("_deployment"))
            return rowKey.Replace("_deployment", "");

        if (rowKey.Contains("_protection_rule"))
            return rowKey.Replace("_protection_rule", "");

        return rowKey;
    }

    private void ShowReviewerApprovalModal(string environment, bool approve)
    {
        currentApprovalEnvironment = environment;
        isApproving = approve;
        showApprovalModal = true;
        approvalError = "";
        approvalCommentInput = "";
        approverName = "";
    }

    private void HideApprovalModal()
    {
        showApprovalModal = false;
        approvalError = "";
        approvalCommentInput = "";
        approverName = "";
        currentApprovalEnvironment = "";
    }

    private async Task ProcessReviewerApproval()
    {
        if (string.IsNullOrWhiteSpace(approverName))
        {
            approvalError = "Please enter your name or username.";
            return;
        }

        var envApproval = pendingApprovals.FirstOrDefault(e => e.Environment == currentApprovalEnvironment);
        if (envApproval == null)
        {
            approvalError = "Environment approval not found.";
            return;
        }

        var hasReviewerApproval = envApproval.ReviewerApprovals
            .Any(ra => ra.PendingReviewers.Any(pr =>
                pr.Equals(approverName, StringComparison.OrdinalIgnoreCase)));

        if (!hasReviewerApproval)
        {
            approvalError = $"'{approverName}' is not in the list of pending reviewers for this environment.";
            return;
        }

        isProcessingApproval = true;
        approvalError = "";

        try
        {
            var newStatus = isApproving ? "approved" : "rejected";

            var approverResponse = new StatusHistoryItem
            {
                Type = "ApproverResponse",
                ApproverName = approverName,
                Creator = approverName,
                State = newStatus,
                Comment = approvalCommentInput ?? "",
                Environment = currentApprovalEnvironment,
                UpdatedAt = DateTimeOffset.UtcNow.ToString("O")
            };

            await AddStatusHistoryEntry(approverResponse);

            await JSRuntime.InvokeVoidAsync("alert",
                $"Deployment {(isApproving ? "approved" : "rejected")} successfully by {approverName}!");

            await LoadDeployment();
            ProcessApprovalRequests();

            HideApprovalModal();
        }
        catch (Exception ex)
        {
            approvalError = $"Error processing approval: {ex.Message}";
            Console.WriteLine($"Approval error: {ex.Message}");
        }
        finally
        {
            isProcessingApproval = false;
        }
    }

    private async Task AddStatusHistoryEntry(StatusHistoryItem newEntry)
    {
        try
        {
            var statusItems = new List<StatusHistoryItem>();
            if (!string.IsNullOrEmpty(deployment.StatusHistory))
            {
                try
                {
                    var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                    var existing = JsonSerializer.Deserialize<StatusHistoryItem[]>(deployment.StatusHistory, options);
                    if (existing != null)
                        statusItems.AddRange(existing);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing existing status history: {ex.Message}");
                }
            }

            statusItems.Add(newEntry);
            var updatedHistory = JsonSerializer.Serialize(statusItems);

            var success = await StorageService.UpdateDeploymentStatusAsync(
                Repository,
                DeploymentId,
                newEntry.State,
                newEntry.Creator,
                newEntry.Comment);

            if (!success)
            {
                throw new Exception("Failed to update deployment status in storage");
            }

            deployment.StatusHistory = updatedHistory;
            await CheckAndUpdateOverallStatus();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding status history entry: {ex.Message}");
            throw;
        }
    }

    private async Task CheckAndUpdateOverallStatus()
    {
        ProcessApprovalRequests();

        if (!pendingApprovals.Any())
        {
            var allApproved = ParseStatusHistory(deployment.StatusHistory)
                .Where(s => s.Type == "ApproverResponse")
                .All(s => s.State?.ToLower() == "approved");

            var newStatus = allApproved ? "approved" : "rejected";

            await StorageService.UpdateDeploymentStatusAsync(
                Repository,
                DeploymentId,
                newStatus,
                "System",
                "All required approvals completed");
        }
    }

    private async Task OpenProtectionRuleCallback(string callbackUrl)
    {
        if (!string.IsNullOrEmpty(callbackUrl))
        {
            await JSRuntime.InvokeVoidAsync("open", callbackUrl, "_blank");
        }
    }

    private void NavigateToRelated()
    {
        if (relatedDeployment != null)
        {
            Navigation.NavigateTo($"/deployments/{Repository}/{relatedDeployment.RowKey}");
        }
    }

    private string GetStateClass(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "pending" => "bg-warning",
        "in_progress" => "bg-info",
        "cancelled" => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStateIcon(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "check",
        "failure" => "x",
        "pending" => "clock",
        "in_progress" => "reload",
        "cancelled" => "ban",
        _ => "question-mark"
    };

    private string GetStateClassForStatus(string status) => status?.ToLower() switch
    {
        "success" or "completed" or "approved" => "bg-success",
        "failure" or "failed" or "rejected" => "bg-danger",
        "pending" or "waiting" or "queued" => "bg-warning",
        "in_progress" or "running" => "bg-info",
        "cancelled" or "canceled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetJobStatusClass(string status) => status?.ToLower() switch
    {
        "completed" => "bg-success",
        "in_progress" => "bg-info",
        "queued" => "bg-warning",
        "cancelled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetJobConclusionClass(string conclusion) => conclusion?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "cancelled" => "bg-secondary",
        "skipped" => "bg-light text-dark",
        _ => "bg-warning"
    };

    private string GetTypeClass(string type) => type switch
    {
        "ReviewRequest" => "bg-warning text-dark",
        "ApproverResponse" => "bg-success",
        "ProtectionRuleRequest" => "bg-primary",
        _ => "bg-secondary"
    };

    private string GetTypeDisplay(string type) => type switch
    {
        "ReviewRequest" => "Review",
        "ApproverResponse" => "Response",
        "ProtectionRuleRequest" => "Protection Rule",
        _ => type
    };

    private List<JobInfo> ParseJobHistory(string jobHistoryJson)
    {
        if (string.IsNullOrWhiteSpace(jobHistoryJson))
            return new List<JobInfo>();

        try
        {
            var jobs = JsonSerializer.Deserialize<JobInfo[]>(jobHistoryJson);
            return jobs?.ToList() ?? new List<JobInfo>();
        }
        catch (JsonException)
        {
            return new List<JobInfo>();
        }
    }

    private List<StatusHistoryItem> ParseStatusHistory(string statusHistoryJson)
    {
        if (string.IsNullOrWhiteSpace(statusHistoryJson))
            return new List<StatusHistoryItem>();

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var items = JsonSerializer.Deserialize<StatusHistoryItem[]>(statusHistoryJson, options);
            return items?.ToList() ?? new List<StatusHistoryItem>();
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Error parsing status history JSON: {ex.Message}");
            Console.WriteLine($"JSON content: {statusHistoryJson}");
            return new List<StatusHistoryItem>();
        }
    }

    private List<DeploymentHistoryInfo> ParseDeploymentHistory(string deploymentHistoryJson)
    {
        if (string.IsNullOrEmpty(deploymentHistoryJson)) return new();
        try
        {
            if (deploymentHistoryJson.TrimStart().StartsWith("["))
                return JsonSerializer.Deserialize<DeploymentHistoryInfo[]>(deploymentHistoryJson)?.ToList() ?? new();
            var single = JsonSerializer.Deserialize<DeploymentHistoryInfo>(deploymentHistoryJson);
            return single != null ? new List<DeploymentHistoryInfo> { single } : new();
        }
        catch { return new(); }
    }

    private void NavigateBack() => Navigation.NavigateTo("/deployments");
}