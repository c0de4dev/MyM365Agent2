@page "/deployments/{Repository}/{DeploymentId}"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using System.Text.Json
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <!-- Breadcrumb Navigation -->
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/tab")'>
                            <i class="oi oi-home"></i> Home
                        </button>
                    </li>
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/deployments")'>
                            Deployments
                        </button>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">@Repository</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (isLoading)
    {
        <!-- Loading State -->
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading deployment details...</span>
                </div>
                <p class="mt-3 text-muted">Loading deployment information...</p>
            </div>
        </div>
    }
    else if (deployment == null)
    {
        <!-- Not Found State -->
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="oi oi-warning me-2"></i>
                    <strong>Deployment not found.</strong>
                    <p class="mb-0 mt-2">The deployment you're looking for doesn't exist or may have been removed.</p>
                </div>
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="oi oi-arrow-left me-2"></i>Back to Deployments
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Header Card -->
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1">
                                    <i class="oi oi-code me-2"></i>
                                    @deployment.Repository
                                </h4>
                                <p class="mb-0 text-muted">@deployment.WorkflowDisplayName</p>
                            </div>
                            <div class="text-end">
                                <span class="badge @GetStateClass(deployment.StatusCategory) fs-6">
                                    <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1"></i>
                                    @deployment.DisplayStatus
                                </span>
                                @if (IsProtectionRuleEntry())
                                {
                                    <span class="badge bg-info ms-2">
                                        <i class="oi oi-shield me-1"></i>
                                        Protection Rule
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="row">
                                    @foreach (var env in deployment.GetEnvironmentStatuses())
                                    {
                                        <div class="col-sm-6 mb-3">
                                            <strong>Environment (@env.Environment):</strong>
                                            <span class="badge @GetStateClassForStatus(env.Status) ms-2">@env.Status</span>
                                            @if (env.LastUpdate.HasValue)
                                            {
                                                <br />
                                                <small class="text-muted">Updated: @env.LastUpdate.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                            }
                                        </div>
                                    }
                                    <div class="col-sm-6 mb-3">
                                        <strong>Branch/Ref:</strong>
                                        <span class="ms-2">
                                            <i class="oi oi-fork me-1"></i>
                                            @deployment.Branch
                                        </span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <strong>Triggered By:</strong>
                                        <span class="ms-2">
                                            <i class="oi oi-person me-1"></i>
                                            @deployment.CreatorLogin
                                        </span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <strong>Trigger Event:</strong>
                                        <span class="badge bg-secondary ms-2">@deployment.TriggerType</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-md-end">
                                    @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                    {
                                        <a href="@deployment.WorkflowRunUrl" target="_blank" class="btn btn-primary me-2 mb-2">
                                            <i class="oi oi-external-link me-2"></i>View on GitHub
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Protection Rule Status Alert -->
        @if (!string.IsNullOrEmpty(deployment.StatusHistory))
        {
            var statusItems = ParseStatusHistory(deployment.StatusHistory);
            var pendingReviewRequests = statusItems.Where(s => s.IsReviewRequest && s.IsPending).ToList();
            var pendingProtectionRules = statusItems.Where(s => s.IsProtectionRuleRequest && s.IsPending).ToList();
            var hasPendingApprovals = pendingReviewRequests.Any() || pendingProtectionRules.Any();

            @if (hasPendingApprovals)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="alert alert-warning border-warning shadow-sm mb-4">
                            <div class="row">
                                <div class="col-md-8">
                                    <h5 class="alert-heading mb-3">
                                        <i class="oi oi-shield me-2"></i>
                                        Protection Rules Active - Approval Required
                                    </h5>

                                    @if (pendingReviewRequests.Any())
                                    {
                                        <div class="mb-3">
                                            <h6 class="fw-bold">
                                                <i class="oi oi-people me-2"></i>User/Team Approvals:
                                            </h6>
                                            @foreach (var request in pendingReviewRequests)
                                            {
                                                <div class="card mb-2 border-warning">
                                                    <div class="card-body py-2">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <span class="badge bg-info me-2">@request.Environment</span>
                                                                <strong>Awaiting review from:</strong>
                                                                @if (request.ReviewersNames != null && request.ReviewersNames.Any())
                                                                {
                                                                    <span class="ms-2">
                                                                        @foreach (var reviewer in request.ReviewersNames)
                                                                        {
                                                                            <span class="badge bg-secondary me-1">
                                                                                <i class="oi oi-@(reviewer.Contains(" ") ? "people" : "person") me-1"></i>
                                                                                @reviewer
                                                                            </span>
                                                                        }
                                                                    </span>
                                                                }
                                                            </div>
                                                            <small class="text-muted">
                                                                <i class="oi oi-clock me-1"></i>
                                                                @request.UpdatedAtDateTime?.ToString("MMM dd, HH:mm")
                                                            </small>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (pendingProtectionRules.Any())
                                    {
                                        <div class="mb-3">
                                            <h6 class="fw-bold">
                                                <i class="oi oi-cog me-2"></i>Custom Protection Rules:
                                            </h6>
                                            @foreach (var rule in pendingProtectionRules)
                                            {
                                                <div class="card mb-2 border-warning">
                                                    <div class="card-body py-2">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <span class="badge bg-info me-2">@rule.Environment</span>
                                                                <strong>Custom deployment protection rule triggered</strong>
                                                                @if (!string.IsNullOrEmpty(rule.CallbackUrl))
                                                                {
                                                                    <br />
                                                                    <small class="text-muted">
                                                                        <i class="oi oi-link-intact me-1"></i>
                                                                        Callback configured
                                                                    </small>
                                                                }
                                                            </div>
                                                            <small class="text-muted">
                                                                <i class="oi oi-clock me-1"></i>
                                                                @rule.UpdatedAtDateTime?.ToString("MMM dd, HH:mm")
                                                            </small>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(approvalComment))
                                    {
                                        <div class="alert alert-info mb-0 mt-3">
                                            <strong>Latest Comment:</strong><br />
                                            @approvalComment
                                        </div>
                                    }
                                </div>
                                <div class="col-md-4">
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-success btn-lg" @onclick="() => ShowApprovalModal(true)" disabled="@isProcessingApproval">
                                            <i class="oi oi-check me-2"></i>
                                            @if (isProcessingApproval)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2"></span>
                                            }
                                            Approve Deployment
                                        </button>
                                        <button class="btn btn-danger btn-lg" @onclick="() => ShowApprovalModal(false)" disabled="@isProcessingApproval">
                                            <i class="oi oi-x me-2"></i>
                                            Reject Deployment
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <!-- Main Content -->
        <div class="row">
            <!-- Left Column - Details -->
            <div class="col-lg-8">
                <!-- Deployment Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="oi oi-info me-2"></i>
                            Deployment Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Repository:</dt>
                                    <dd class="col-sm-7">@deployment.Repository</dd>

                                    <dt class="col-sm-5">Status:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge @GetStateClass(deployment.StatusCategory)">@deployment.DisplayStatus</span>
                                    </dd>

                                    <dt class="col-sm-5">Workflow:</dt>
                                    <dd class="col-sm-7">@deployment.WorkflowDisplayName</dd>

                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                    {
                                        <dt class="col-sm-5">Run Number:</dt>
                                        <dd class="col-sm-7">#@deployment.RunNumberDisplay</dd>
                                    }

                                    @if (!string.IsNullOrEmpty(deployment.DeploymentIdDisplay) && deployment.DeploymentIdDisplay != "N/A")
                                    {
                                        <dt class="col-sm-5">Deployment ID:</dt>
                                        <dd class="col-sm-7">@deployment.DeploymentIdDisplay</dd>
                                    }

                                    <dt class="col-sm-5">Entry Type:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge @(IsProtectionRuleEntry() ? "bg-info" : "bg-primary")">
                                            @(IsProtectionRuleEntry() ? "Protection Rule" : "Deployment")
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Created:</dt>
                                    <dd class="col-sm-7">@deployment.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                                    <dt class="col-sm-5">Last Updated:</dt>
                                    <dd class="col-sm-7">@deployment.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                                    @if (deployment.RunStartedAtDateTime.HasValue)
                                    {
                                        <dt class="col-sm-5">Started:</dt>
                                        <dd class="col-sm-7">@deployment.RunStartedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                                    }

                                    @if (!string.IsNullOrEmpty(deployment.FormattedDuration) && deployment.FormattedDuration != "N/A")
                                    {
                                        <dt class="col-sm-5">Duration:</dt>
                                        <dd class="col-sm-7">
                                            <i class="oi oi-clock me-1"></i>
                                            @deployment.FormattedDuration
                                        </dd>
                                    }

                                    <dt class="col-sm-5">Event Type:</dt>
                                    <dd class="col-sm-7">@deployment.EventType</dd>

                                    <dt class="col-sm-5">Trigger:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge bg-secondary">@deployment.TriggerType</span>
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(deployment.Note))
                        {
                            <div class="mt-3">
                                <h6>Notes:</h6>
                                <div class="alert alert-light">
                                    <i class="oi oi-note me-2"></i>
                                    @deployment.Note
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Related Deployment/Protection Rule Card -->
                @if (relatedDeployment != null)
                {
                    <div class="card mb-4 @(IsProtectionRuleEntry() ? "border-primary" : "border-info")">
                        <div class="card-header @(IsProtectionRuleEntry() ? "bg-primary text-white" : "bg-info text-white")">
                            <h5 class="mb-0">
                                <i class="oi oi-link-intact me-2"></i>
                                Related @(IsProtectionRuleEntry() ? "Deployment" : "Protection Rule") Entry
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <h6 class="mb-2">
                                        <i class="oi oi-code me-2"></i>
                                        @relatedDeployment.WorkflowDisplayName
                                    </h6>
                                    <dl class="row mb-0">
                                        <dt class="col-sm-4">Status:</dt>
                                        <dd class="col-sm-8">
                                            <span class="badge @GetStateClass(relatedDeployment.StatusCategory)">
                                                @relatedDeployment.DisplayStatus
                                            </span>
                                        </dd>

                                        <dt class="col-sm-4">Environment:</dt>
                                        <dd class="col-sm-8">
                                            <span class="badge bg-info">@relatedDeployment.Environment</span>
                                        </dd>

                                        <dt class="col-sm-4">Updated:</dt>
                                        <dd class="col-sm-8">
                                            <small class="text-muted">
                                                @relatedDeployment.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                                            </small>
                                        </dd>

                                        <dt class="col-sm-4">Entry Type:</dt>
                                        <dd class="col-sm-8">
                                            <span class="badge @(IsProtectionRuleEntry() ? "bg-primary" : "bg-info")">
                                                @(IsProtectionRuleEntry() ? "Deployment" : "Protection Rule")
                                            </span>
                                        </dd>
                                    </dl>
                                </div>
                                <div class="col-md-4 d-flex align-items-center justify-content-end">
                                    <button class="btn btn-outline-primary" @onclick="NavigateToRelated">
                                        <i class="oi oi-eye me-2"></i>
                                        View Details
                                    </button>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(relatedDeployment.StatusHistory))
                            {
                                var relatedStatusItems = ParseStatusHistory(relatedDeployment.StatusHistory);
                                var relatedPendingItems = relatedStatusItems.Where(s => s.IsPending).ToList();

                                @if (relatedPendingItems.Any())
                                {
                                    <div class="alert alert-warning mt-3 mb-0">
                                        <small>
                                            <i class="oi oi-info me-2"></i>
                                            <strong>@relatedPendingItems.Count</strong> pending approval(s) in related entry
                                        </small>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }

                <!-- Job Execution Details -->
                @if (!string.IsNullOrEmpty(deployment.JobHistory))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-cog me-2"></i>
                                Job Execution Details
                            </h5>
                        </div>
                        <div class="card-body">
                            @{
                                var jobSummary = deployment.GetJobSummary();
                                var jobs = ParseJobHistory(deployment.JobHistory);
                            }
                            <div class="row mb-4">
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Total Jobs</h6>
                                    <h3 class="mb-0">@jobSummary.TotalJobs</h3>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Success Rate</h6>
                                    <h3 class="mb-0 text-success">@jobSummary.SuccessRate.ToString("F1")%</h3>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Failed Jobs</h6>
                                    <h3 class="mb-0 text-danger">@jobSummary.FailedJobs</h3>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Total Duration</h6>
                                    <h3 class="mb-0">@jobSummary.FormattedDuration</h3>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-sm table-hover">
                                    <thead>
                                        <tr>
                                            <th>Job Name</th>
                                            <th>Status</th>
                                            <th>Conclusion</th>
                                            <th>Duration</th>
                                            <th>Runner</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var job in jobs)
                                        {
                                            <tr>
                                                <td>
                                                    <i class="oi oi-briefcase me-2"></i>
                                                    @job.name
                                                </td>
                                                <td>
                                                    <span class="badge @GetJobStatusClass(job.status)">
                                                        @job.status
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(job.conclusion))
                                                    {
                                                        <span class="badge @GetJobConclusionClass(job.conclusion)">
                                                            @job.conclusion
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (job.duration_seconds.HasValue && job.duration_seconds.Value > 0)
                                                    {
                                                        <span>@TimeSpan.FromSeconds(job.duration_seconds.Value).ToString(@"hh\:mm\:ss")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        @job.runner_name
                                                    </small>
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(job.html_url))
                                                    {
                                                        <a href="@job.html_url" target="_blank"
                                                           class="btn btn-sm btn-outline-primary"
                                                           title="View Job on GitHub">
                                                            <i class="oi oi-external-link"></i>
                                                        </a>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

                <!-- Environment Approval Status Section -->
                @if (!string.IsNullOrEmpty(deployment.StatusHistory))
                {
                    var statusItems = ParseStatusHistory(deployment.StatusHistory);
                    var environmentGroups = statusItems
                    .Where(s => !string.IsNullOrEmpty(s.Environment))
                    .GroupBy(s => s.Environment)
                    .OrderBy(g => g.Key);

                    @if (environmentGroups.Any())
                    {
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="oi oi-shield me-2"></i>
                                    Environment Approval Status
                                </h5>
                            </div>
                            <div class="card-body">
                                @foreach (var envGroup in environmentGroups)
                                {
                                    var envName = envGroup.Key;
                                    var reviewRequests = envGroup.Where(s => s.IsReviewRequest).OrderByDescending(s => s.UpdatedAtDateTime).ToList();
                                    var approverResponses = envGroup.Where(s => s.IsApproverResponse).OrderByDescending(s => s.UpdatedAtDateTime).ToList();
                                    var protectionRules = envGroup.Where(s => s.IsProtectionRuleRequest).OrderByDescending(s => s.UpdatedAtDateTime).ToList();

                                    var latestReviewRequest = reviewRequests.FirstOrDefault();
                                    var latestApproverResponse = approverResponses.FirstOrDefault();
                                    var latestProtectionRule = protectionRules.FirstOrDefault();

                                    var isPendingReview = latestReviewRequest != null && latestReviewRequest.IsPending;
                                    var isPendingProtection = latestProtectionRule != null && latestProtectionRule.IsPending;
                                    var isApproved = latestApproverResponse != null && latestApproverResponse.IsApproved;
                                    var isRejected = latestApproverResponse != null && latestApproverResponse.IsRejected;

                                    <div class="card mb-3 @(isPendingReview || isPendingProtection ? "border-warning" : isApproved ? "border-success" : isRejected ? "border-danger" : "")">
                                        <div class="card-header @(isPendingReview || isPendingProtection ? "bg-warning bg-opacity-10" : isApproved ? "bg-success bg-opacity-10" : isRejected ? "bg-danger bg-opacity-10" : "")">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h6 class="mb-0">
                                                    <span class="badge bg-info me-2">@envName</span>
                                                    @if (isPendingReview || isPendingProtection)
                                                    {
                                                        <span class="badge bg-warning">
                                                            <i class="oi oi-clock me-1"></i>Pending Approval
                                                        </span>
                                                    }
                                                    else if (isApproved)
                                                    {
                                                        <span class="badge bg-success">
                                                            <i class="oi oi-check me-1"></i>Approved
                                                        </span>
                                                    }
                                                    else if (isRejected)
                                                    {
                                                        <span class="badge bg-danger">
                                                            <i class="oi oi-x me-1"></i>Rejected
                                                        </span>
                                                    }
                                                </h6>
                                                @if (latestApproverResponse != null && latestApproverResponse.UpdatedAtDateTime.HasValue)
                                                {
                                                    <small class="text-muted">
                                                        <i class="oi oi-clock me-1"></i>
                                                        @latestApproverResponse.UpdatedAtDateTime.Value.ToString("MMM dd, HH:mm")
                                                    </small>
                                                }
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <!-- Environment Approvers -->
                                                @if (latestReviewRequest != null)
                                                {
                                                    <div class="col-md-6 mb-3">
                                                        <h6 class="fw-bold mb-2">
                                                            <i class="oi oi-people me-2"></i>Environment Approvers
                                                        </h6>
                                                        <div class="d-flex flex-wrap gap-2 mb-2">
                                                            @if (latestReviewRequest.ReviewersNames != null && latestReviewRequest.ReviewersNames.Any())
                                                            {
                                                                @foreach (var reviewer in latestReviewRequest.ReviewersNames)
                                                                {
                                                                    <span class="badge bg-secondary">
                                                                        <i class="oi oi-@(reviewer.Contains(" ") ? "people" : "person") me-1"></i>
                                                                        @reviewer
                                                                    </span>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">No reviewers specified</span>
                                                            }
                                                        </div>
                                                        <div class="small">
                                                            <strong>Status:</strong>
                                                            <span class="badge @GetStateClassForStatus(latestReviewRequest.State) ms-1">
                                                                @latestReviewRequest.State
                                                            </span>
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(latestReviewRequest.Description))
                                                        {
                                                            <div class="small text-muted mt-1">
                                                                <i class="oi oi-info me-1"></i>@latestReviewRequest.Description
                                                            </div>
                                                        }
                                                    </div>
                                                }

                                                <!-- Custom Protection Rule -->
                                                @if (latestProtectionRule != null)
                                                {
                                                    <div class="col-md-6 mb-3">
                                                        <h6 class="fw-bold mb-2">
                                                            <i class="oi oi-cog me-2"></i>Custom Protection Rule
                                                        </h6>
                                                        <div class="mb-2">
                                                            <span class="badge @GetStateClassForStatus(latestProtectionRule.State)">
                                                                @latestProtectionRule.State
                                                            </span>
                                                            @if (!string.IsNullOrEmpty(latestProtectionRule.CallbackUrl))
                                                            {
                                                                <span class="badge bg-secondary ms-1">
                                                                    <i class="oi oi-link-intact me-1"></i>Callback
                                                                </span>
                                                            }
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(latestProtectionRule.Description))
                                                        {
                                                            <div class="small text-muted">
                                                                <i class="oi oi-info me-1"></i>@latestProtectionRule.Description
                                                            </div>
                                                        }
                                                        @if (latestProtectionRule.UpdatedAtDateTime.HasValue)
                                                        {
                                                            <div class="small text-muted mt-1">
                                                                <i class="oi oi-clock me-1"></i>
                                                                @latestProtectionRule.UpdatedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>

                                            <!-- Approval Response Details -->
                                            @if (latestApproverResponse != null)
                                            {
                                                <div class="mt-3 pt-3 border-top">
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <strong>
                                                                <i class="oi oi-@(isApproved ? "check" : "x") me-1"></i>
                                                                @(isApproved ? "Approved" : "Rejected") By:
                                                            </strong>
                                                            <span class="ms-2">
                                                                <i class="oi oi-person me-1"></i>
                                                                @latestApproverResponse.ApproverName
                                                            </span>
                                                        </div>
                                                        <div class="col-md-6">
                                                            @if (!string.IsNullOrEmpty(latestApproverResponse.Comment))
                                                            {
                                                                <div>
                                                                    <strong>Comment:</strong>
                                                                    <span class="ms-2 text-muted">@latestApproverResponse.Comment</span>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            }

                                            <!-- History Timeline -->
                                            @if (reviewRequests.Count > 1 || approverResponses.Count > 1)
                                            {
                                                <div class="mt-3 pt-3 border-top">
                                                    <div class="accordion" id="accordion-@envName.Replace(" ", "-")">
                                                        <div class="accordion-item border-0">
                                                            <h2 class="accordion-header">
                                                                <button class="accordion-button collapsed py-2 bg-light" type="button"
                                                                        data-bs-toggle="collapse"
                                                                        data-bs-target="#collapse-@envName.Replace(" ", "-")">
                                                                    <small>
                                                                        <i class="oi oi-list me-2"></i>
                                                                        View Full History (@(reviewRequests.Count + approverResponses.Count + protectionRules.Count) events)
                                                                    </small>
                                                                </button>
                                                            </h2>
                                                            <div id="collapse-@envName.Replace(" ", "-")"
                                                                 class="accordion-collapse collapse">
                                                                <div class="accordion-body p-2">
                                                                    <div class="list-group list-group-flush">
                                                                        @foreach (var item in envGroup.OrderByDescending(s => s.UpdatedAtDateTime))
                                                                        {
                                                                            <div class="list-group-item px-0 py-2">
                                                                                <div class="d-flex justify-content-between align-items-start">
                                                                                    <div>
                                                                                        @if (item.IsReviewRequest)
                                                                                        {
                                                                                            <span class="badge bg-primary me-2">Review Request</span>
                                                                                            @if (item.ReviewersNames != null)
                                                                                            {
                                                                                                @foreach (var r in item.ReviewersNames)
                                                                                                {
                                                                                                    <span class="badge bg-secondary me-1">@r</span>
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else if (item.IsApproverResponse)
                                                                                        {
                                                                                            <span class="badge bg-success me-2">Response</span>
                                                                                            <span>@item.ApproverName @item.State</span>
                                                                                        }
                                                                                        else if (item.IsProtectionRuleRequest)
                                                                                        {
                                                                                            <span class="badge bg-warning text-dark me-2">Protection Rule</span>
                                                                                            <span>@item.State</span>
                                                                                        }
                                                                                    </div>
                                                                                    <small class="text-muted">
                                                                                        @item.UpdatedAtDateTime?.ToString("MMM dd, HH:mm")
                                                                                    </small>
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }

                <!-- Deployment History -->
                @if (!string.IsNullOrEmpty(deployment.DeploymentHistory))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-layers me-2"></i>
                                Deployment History
                            </h5>
                        </div>
                        <div class="card-body">
                            @{
                                var historyItems = ParseDeploymentHistory(deployment.DeploymentHistory);
                            }
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Environment</th>
                                            <th>Creator</th>
                                            <th>Branch/Ref</th>
                                            <th>Created</th>
                                            <th>Updated</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var info in historyItems)
                                        {
                                            <tr>
                                                <td><span class="badge bg-info">@info.Environment</span></td>
                                                <td>@info.Creator</td>
                                                <td><i class="oi oi-fork me-1"></i>@info.Ref</td>
                                                <td>@info.CreatedAtDateTime?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                <td>@info.UpdatedAtDateTime?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Right Column - Quick Actions & Metadata -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="oi oi-dashboard me-2"></i>Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                            {
                                <a href="@deployment.WorkflowRunUrl" target="_blank" class="btn btn-primary">
                                    <i class="oi oi-external-link me-2"></i>View Workflow Run
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(deployment.WorkflowUrl))
                            {
                                <a href="@deployment.WorkflowUrl" target="_blank" class="btn btn-outline-primary">
                                    <i class="oi oi-code me-2"></i>View Workflow File
                                </a>
                            }
                            @if (relatedDeployment != null)
                            {
                                <button class="btn btn-outline-info" @onclick="NavigateToRelated">
                                    <i class="oi oi-link-intact me-2"></i>View @(IsProtectionRuleEntry() ? "Deployment" : "Protection Rule")
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="oi oi-tag me-2"></i>Metadata</h6>
                    </div>
                    <div class="card-body">
                        <dl>
                            <dt>Row Key:</dt>
                            <dd><code>@deployment.RowKey</code></dd>
                            @if (!string.IsNullOrEmpty(deployment.WorkflowRunIdDisplay) && deployment.WorkflowRunIdDisplay != "N/A")
                            {
                                <dt>Workflow Run ID:</dt>
                                <dd><code>@deployment.WorkflowRunIdDisplay</code></dd>
                            }
                            @if (!string.IsNullOrEmpty(deployment.WorkflowPath))
                            {
                                <dt>Workflow Path:</dt>
                                <dd><code>@deployment.WorkflowPath</code></dd>
                            }
                            <dt>Event Type:</dt>
                            <dd><code>@deployment.EventType</code></dd>
                            <dt>Last Modified:</dt>
                            <dd>@deployment.Timestamp?.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div class="row mt-4">
            <div class="col-12">
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="oi oi-arrow-left me-2"></i>Back to Deployments
                </button>
            </div>
        </div>
    }
</div>

<!-- Approval Modal -->
@if (showApprovalModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (isApproving)
                        {
                            <i class="oi oi-check me-2 text-success"></i>
                            <text>Approve Deployment</text>
                        }
                        else
                        {
                            <i class="oi oi-x me-2 text-danger"></i>
                            <text>Reject Deployment</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideApprovalModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Repository:</strong> @deployment.Repository<br />
                        <strong>Environment:</strong> @deployment.Environment<br />
                        <strong>Workflow:</strong> @deployment.WorkflowDisplayName<br />
                        <strong>Requested by:</strong> @deployment.CreatorLogin
                    </div>

                    <div class="mb-3">
                        <label for="approverName" class="form-label">Your Name/Username:</label>
                        <input type="text" class="form-control" id="approverName" @bind="approverName"
                               placeholder="Enter your name or username" />
                    </div>

                    <div class="mb-3">
                        <label for="approvalCommentInput" class="form-label">Comment (Optional):</label>
                        <textarea class="form-control" id="approvalCommentInput" rows="3" @bind="approvalCommentInput"
                                  placeholder="@(isApproving ? "Add approval notes..." : "Provide rejection reason...")"></textarea>
                    </div>

                    @if (!string.IsNullOrEmpty(approvalError))
                    {
                        <div class="alert alert-danger">
                            <i class="oi oi-warning me-2"></i>
                            @approvalError
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideApprovalModal" disabled="@isProcessingApproval">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn @(isApproving ? "btn-success" : "btn-danger")"
                            @onclick="ProcessApproval"
                            disabled="@(isProcessingApproval || string.IsNullOrWhiteSpace(approverName))">
                        @if (isProcessingApproval)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @if (isApproving)
                        {
                            <i class="oi oi-check me-2"></i>
                            <text>Approve</text>
                        }
                        else
                        {
                            <i class="oi oi-x me-2"></i>
                            <text>Reject</text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Repository { get; set; }
    [Parameter] public string DeploymentId { get; set; }

    private DeploymentState deployment;
    private DeploymentState relatedDeployment;
    private bool isLoading = true;

    // Approval functionality
    private bool showApprovalModal = false;
    private bool isApproving = false;
    private bool isProcessingApproval = false;
    private string approverName = "";
    private string approvalComment = "";
    private string approvalCommentInput = "";
    private string approvalError = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDeployment();
        await LoadRelatedDeployment();

        // Ensure UI updates after both loads complete
        StateHasChanged();
    }

    private async Task LoadDeployment()
    {
        try
        {
            deployment = await StorageService.GetDeploymentAsync(Repository, DeploymentId);

            // Load approval comment if it exists in status history
            if (deployment != null && !string.IsNullOrEmpty(deployment.StatusHistory))
            {
                var statusItems = ParseStatusHistory(deployment.StatusHistory);
                var latestApproval = statusItems
                    .Where(s => !string.IsNullOrEmpty(s.Description) || !string.IsNullOrEmpty(s.Comment))
                    .OrderByDescending(s => s.UpdatedAtDateTime)
                    .FirstOrDefault();

                if (latestApproval != null)
                {
                    approvalComment = latestApproval.DisplayDescription;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading deployment: {ex.Message}");
        }
        // Don't set isLoading to false here - wait until related deployment is also loaded
    }

    private async Task LoadRelatedDeployment()
    {
        if (deployment == null)
        {
            isLoading = false;
            return;
        }

        try
        {
            var workflowRunId = GetWorkflowRunIdFromRowKey(deployment.RowKey);
            if (!string.IsNullOrEmpty(workflowRunId))
            {
                // If this is a protection rule entry, get the deployment entry, and vice versa
                bool getProtectionRule = !IsProtectionRuleEntry();
                relatedDeployment = await StorageService.GetRelatedDeploymentAsync(
                    Repository,
                    workflowRunId,
                    getProtectionRule);

                if (relatedDeployment != null)
                {
                    Console.WriteLine($"✓ Loaded related {(getProtectionRule ? "protection rule" : "deployment")}: {relatedDeployment.RowKey}");
                }
                else
                {
                    Console.WriteLine($"⚠ No related {(getProtectionRule ? "protection rule" : "deployment")} found for workflow run: {workflowRunId}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading related deployment: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            // Force UI update after loading related deployment
            StateHasChanged();
        }
    }

    private bool IsProtectionRuleEntry()
    {
        return deployment?.RowKey?.Contains("_protection_rule") == true;
    }

    private bool IsPendingApproval()
    {
        if (deployment == null) return false;

        var status = deployment.StatusCategory.ToLower();
        return status == "pending" ||
               status == "waiting" ||
               deployment.State.ToLower().Contains("pending") ||
               deployment.State.ToLower().Contains("waiting");
    }

    private string GetWorkflowRunIdFromRowKey(string rowKey)
    {
        if (string.IsNullOrEmpty(rowKey)) return null;

        if (rowKey.Contains("_deployment"))
            return rowKey.Replace("_deployment", "");

        if (rowKey.Contains("_protection_rule"))
            return rowKey.Replace("_protection_rule", "");

        return rowKey;
    }

    private void ShowApprovalModal(bool approve)
    {
        isApproving = approve;
        showApprovalModal = true;
        approvalError = "";
        approvalCommentInput = "";
    }

    private void HideApprovalModal()
    {
        showApprovalModal = false;
        approvalError = "";
        approvalCommentInput = "";
        approverName = "";
    }

    private async Task ProcessApproval()
    {
        if (string.IsNullOrWhiteSpace(approverName))
        {
            approvalError = "Please enter your name or username.";
            return;
        }

        isProcessingApproval = true;
        approvalError = "";

        try
        {
            var newStatus = isApproving ? "approved" : "rejected";
            var comment = string.IsNullOrWhiteSpace(approvalCommentInput)
                ? (isApproving ? "Deployment approved" : "Deployment rejected")
                : approvalCommentInput;

            // Create new status history entry
            var statusUpdate = new StatusHistoryItem
            {
                Type = "ApproverResponse",
                ApproverName = approverName,
                Comment = comment,
                Creator = approverName,
                State = newStatus,
                Description = comment,
                Environment = deployment.Environment,
                LogUrl = deployment.WorkflowRunUrl,
                UpdatedAt = DateTimeOffset.UtcNow.ToString("O")
            };

            // Update the deployment status
            await UpdateDeploymentStatus(newStatus, statusUpdate);

            // Show success message
            await JSRuntime.InvokeVoidAsync("alert",
                $"Deployment {(isApproving ? "approved" : "rejected")} successfully!");

            // Reload both deployment and related deployment to show updated status
            await LoadDeployment();
            await LoadRelatedDeployment();

            HideApprovalModal();
        }
        catch (Exception ex)
        {
            approvalError = $"Error processing approval: {ex.Message}";
            Console.WriteLine($"Approval error: {ex.Message}");
        }
        finally
        {
            isProcessingApproval = false;
        }
    }

    private async Task UpdateDeploymentStatus(string newStatus, StatusHistoryItem statusUpdate)
    {
        try
        {
            // Use the actual service method to update the deployment status
            var success = await StorageService.UpdateDeploymentStatusAsync(
                Repository,
                DeploymentId,
                newStatus,
                statusUpdate.Creator,
                statusUpdate.Description);

            if (!success)
            {
                throw new Exception("Failed to update deployment status in storage");
            }

            // Update local deployment object for UI
            var statusItems = new List<StatusHistoryItem>();
            if (!string.IsNullOrEmpty(deployment.StatusHistory))
            {
                try
                {
                    var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                    var existing = JsonSerializer.Deserialize<StatusHistoryItem[]>(deployment.StatusHistory, options);
                    if (existing != null)
                        statusItems.AddRange(existing);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing existing status history: {ex.Message}");
                }
            }

            statusItems.Add(statusUpdate);
            deployment.CurrentStatus = newStatus;
            deployment.StatusHistory = JsonSerializer.Serialize(statusItems);
            deployment.LastStatusUpdate = DateTimeOffset.UtcNow.ToString("O");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating deployment status: {ex.Message}");
            throw;
        }
    }

    private void NavigateToRelated()
    {
        if (relatedDeployment != null)
        {
            Navigation.NavigateTo($"/deployments/{Repository}/{relatedDeployment.RowKey}");
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/deployments");
    }

    // Helper methods for styling
    private string GetStateClass(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "pending" => "bg-warning",
        "in_progress" => "bg-info",
        "cancelled" => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStateIcon(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "check",
        "failure" => "x",
        "pending" => "clock",
        "in_progress" => "reload",
        "cancelled" => "ban",
        _ => "question-mark"
    };

    private string GetStateClassForStatus(string status) => status?.ToLower() switch
    {
        "success" or "completed" or "approved" => "bg-success",
        "failure" or "failed" or "rejected" => "bg-danger",
        "pending" or "waiting" or "queued" => "bg-warning",
        "in_progress" or "running" => "bg-info",
        "cancelled" or "canceled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetJobStatusClass(string status) => status?.ToLower() switch
    {
        "completed" => "bg-success",
        "in_progress" => "bg-info",
        "queued" => "bg-warning",
        "cancelled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetJobConclusionClass(string conclusion) => conclusion?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "cancelled" => "bg-secondary",
        "skipped" => "bg-light text-dark",
        _ => "bg-warning"
    };

    // Parsing methods
    private List<JobInfo> ParseJobHistory(string jobHistoryJson)
    {
        if (string.IsNullOrWhiteSpace(jobHistoryJson))
            return new List<JobInfo>();

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var jobs = JsonSerializer.Deserialize<JobInfo[]>(jobHistoryJson, options);
            return jobs?.ToList() ?? new List<JobInfo>();
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Error parsing job history: {ex.Message}");
            return new List<JobInfo>();
        }
    }

    private List<StatusHistoryItem> ParseStatusHistory(string statusHistoryJson)
    {
        if (string.IsNullOrWhiteSpace(statusHistoryJson))
            return new List<StatusHistoryItem>();

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var items = JsonSerializer.Deserialize<StatusHistoryItem[]>(statusHistoryJson, options);
            return items?.ToList() ?? new List<StatusHistoryItem>();
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Error parsing status history: {ex.Message}");
            Console.WriteLine($"JSON content: {statusHistoryJson?.Substring(0, Math.Min(200, statusHistoryJson.Length))}...");
            return new List<StatusHistoryItem>();
        }
    }

    private List<DeploymentHistoryInfo> ParseDeploymentHistory(string deploymentHistoryJson)
    {
        if (string.IsNullOrWhiteSpace(deploymentHistoryJson))
            return new List<DeploymentHistoryInfo>();

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            if (deploymentHistoryJson.TrimStart().StartsWith("["))
            {
                var items = JsonSerializer.Deserialize<DeploymentHistoryInfo[]>(deploymentHistoryJson, options);
                return items?.ToList() ?? new List<DeploymentHistoryInfo>();
            }
            else
            {
                var single = JsonSerializer.Deserialize<DeploymentHistoryInfo>(deploymentHistoryJson, options);
                return single != null ? new List<DeploymentHistoryInfo> { single } : new List<DeploymentHistoryInfo>();
            }
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Error parsing deployment history: {ex.Message}");
            return new List<DeploymentHistoryInfo>();
        }
    }
}