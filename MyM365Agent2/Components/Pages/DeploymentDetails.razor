@page "/deployments/{Repository}/{DeploymentId}"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using System.Text.Json
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation

<h3>Deployment Details</h3>

@if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (deployment == null)
{
    <div class="alert alert-warning">
        Deployment not found.
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h4>@deployment.PartitionKey - @deployment.workflowName</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl>
                        <dt>Repository</dt>
                        <dd>@deployment.PartitionKey</dd>

                        <dt>Environment</dt>
                        <dd><span class="badge bg-info">@deployment.environment</span></dd>

                        <dt>Status</dt>
                        <dd>
                            <span class="badge @GetStateClass(deployment.runStatus)">@deployment.runStatus</span>
                        </dd>

                        <dt>Workflow Name</dt>
                        <dd>@deployment.workflowName</dd>

                        <dt>Creator</dt>
                        <dd>@deployment.creator</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl>
                        <dt>Branch/Tag</dt>
                        <dd>@deployment.branch</dd>

                        <dt>Workflow Run ID</dt>
                        <dd>@deployment.workflowRunId</dd>

                        <dt>Deployment ID</dt>
                        <dd>@deployment.deploymentId</dd>

                        <dt>Run Started At</dt>
                        <dd>@deployment.runStartedAt?.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                        <dt>Inserted At</dt>
                        <dd>@deployment.inserted?.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                    </dl>
                </div>
            </div>

            <div class="mt-3">
                @if (!string.IsNullOrEmpty(deployment.workflowrunUrl))
                {
                    <a href="@deployment.workflowrunUrl" target="_blank" class="btn btn-primary">View Workflow Run</a>
                }

                @if (!string.IsNullOrEmpty(deployment.workflowUrl))
                {
                    <a href="@deployment.workflowUrl" target="_blank" class="btn btn-info">View Workflow File</a>
                }
            </div>

            @if (!string.IsNullOrEmpty(deployment.statusHistory))
            {
                <div class="mt-3">
                    <h5>Status History</h5>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Environment</th>
                                    <th>State</th>
                                    <th>Updated At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var status in ParseStatusHistory(deployment.statusHistory))
                                {
                                    <tr>
                                        <td>@status.environment</td>
                                        <td><span class="badge @GetStateClass(status.state)">@status.state</span></td>
                                        <td>@status.updatedAt</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(status.logUrl))
                                            {
                                                <a href="@status.logUrl" target="_blank" class="btn btn-sm btn-outline-primary">Logs</a>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="NavigateBack">Back to List</button>
    </div>
}

@code {
    [Parameter] public string Repository { get; set; }
    [Parameter] public string DeploymentId { get; set; }

    private DeploymentState deployment;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDeployment();
    }

    private async Task LoadDeployment()
    {
        isLoading = true;
        deployment = await StorageService.GetDeploymentAsync(Repository, DeploymentId);
        isLoading = false;
    }

    private string GetStateClass(string state)
    {
        if (string.IsNullOrEmpty(state))
            return "bg-secondary";

        return state.ToLower() switch
        {
            "success" => "bg-success",
            "completed" => "bg-success",
            "failure" => "bg-danger",
            "failed" => "bg-danger",
            "error" => "bg-danger",
            "pending" => "bg-warning",
            "queued" => "bg-warning",
            "in_progress" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private List<StatusHistoryItem> ParseStatusHistory(string statusHistoryJson)
    {
        var result = new List<StatusHistoryItem>();
        if (string.IsNullOrEmpty(statusHistoryJson))
            return result;

        try
        {
            var items = JsonSerializer.Deserialize<List<StatusHistoryItem>>(statusHistoryJson);
            return items ?? result;
        }
        catch
        {
            return result;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/deployments");
    }

    private class StatusHistoryItem
    {
        public string environment { get; set; }
        public string state { get; set; }
        public string description { get; set; }
        public string updatedAt { get; set; }
        public string logUrl { get; set; }
    }
}