@page "/deployments/{Repository}/{DeploymentId}"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using System.Text.Json
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject ILogger<DeploymentDetails> Logger

<PageTitle>@(deployment?.Repository ?? Repository) - Deployment Details</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/")' aria-label="Go to dashboard">
                            <i class="oi oi-home" aria-hidden="true"></i> Home
                        </button>
                    </li>
                    <li class="breadcrumb-item">
                        <button class="btn btn-link p-0" @onclick='() => Navigation.NavigateTo("/deployments")' aria-label="Go to deployments list">
                            Deployments
                        </button>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">@Repository</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">
                        <i class="oi oi-warning me-2" aria-hidden="true"></i>
                        Error Loading Deployment
                    </h4>
                    <p>@errorMessage</p>
                    <hr>
                    <p class="mb-0">
                        <button class="btn btn-outline-danger" @onclick="RetryLoad" disabled="@isLoading">
                            <i class="oi oi-reload me-1" aria-hidden="true"></i>
                            @(isLoading ? "Retrying..." : "Retry")
                        </button>
                        <button class="btn btn-secondary ms-2" @onclick="NavigateBack">
                            <i class="oi oi-arrow-left me-1" aria-hidden="true"></i>
                            Back to List
                        </button>
                    </p>
                </div>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-center align-items-center py-5">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading deployment details...</span>
                        </div>
                        <p class="mt-3 text-muted">Loading deployment information...</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (deployment == null && errorMessage == null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning" role="alert">
                    <i class="oi oi-warning me-2" aria-hidden="true"></i>
                    <strong>Deployment not found.</strong>
                    <p class="mb-3 mt-2">The deployment you're looking for doesn't exist or may have been removed.</p>
                    <button class="btn btn-secondary" @onclick="NavigateBack">
                        <i class="oi oi-arrow-left me-1" aria-hidden="true"></i>
                        Back to Deployments
                    </button>
                </div>
            </div>
        </div>
    }
    else if (deployment != null)
    {
        <!-- Header Card -->
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1">
                                    <i class="oi oi-code me-2" aria-hidden="true"></i>
                                    @deployment.Repository
                                </h4>
                                <p class="mb-0 text-muted">@deployment.WorkflowDisplayName</p>
                            </div>
                            <div class="text-end">
                                <span class="badge @GetStateClass(deployment.StatusCategory) fs-6">
                                    <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1" aria-hidden="true"></i>
                                    @deployment.DisplayStatus
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="row">
                                    @if (environmentStatuses.Any())
                                    {
                                        @foreach (var env in environmentStatuses)
                                        {
                                            <div class="col-sm-6 mb-3">
                                                <strong>Environment (@env.Environment):</strong>
                                                <span class="badge @GetStateClassForStatus(env.Status) ms-2">@env.Status</span>
                                                @if (env.LastUpdate.HasValue)
                                                {
                                                    <br />
                                                    <small class="text-muted">
                                                        Updated: 
                                                        <time datetime="@env.LastUpdate.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                            @env.LastUpdate.Value.ToString("yyyy-MM-dd HH:mm")
                                                        </time>
                                                    </small>
                                                }
                                            </div>
                                        }
                                    }
                                    <div class="col-sm-6 mb-3">
                                        <strong>Branch/Ref:</strong>
                                        <span class="ms-2">
                                            <i class="oi oi-fork me-1" aria-hidden="true"></i>
                                            @deployment.Branch
                                        </span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <strong>Triggered By:</strong>
                                        <span class="ms-2">
                                            <i class="oi oi-person me-1" aria-hidden="true"></i>
                                            @deployment.CreatorLogin
                                        </span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <strong>Trigger Event:</strong>
                                        <span class="badge bg-secondary ms-2">@deployment.TriggerType</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-md-end">
                                    @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                    {
                                        <a href="@deployment.WorkflowRunUrl" 
                                           target="_blank" 
                                           rel="noopener noreferrer"
                                           class="btn btn-primary me-2 mb-2"
                                           aria-label="View workflow run on GitHub">
                                            <i class="oi oi-external-link me-1" aria-hidden="true"></i>
                                            View Run
                                        </a>
                                    }
                                    @if (!string.IsNullOrEmpty(deployment.WorkflowUrl))
                                    {
                                        <a href="@deployment.WorkflowUrl" 
                                           target="_blank" 
                                           rel="noopener noreferrer"
                                           class="btn btn-outline-primary mb-2"
                                           aria-label="View workflow file on GitHub">
                                            <i class="oi oi-code me-1" aria-hidden="true"></i>
                                            Workflow File
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="row">
            <!-- Left Column - Details -->
            <div class="col-lg-8">
                <!-- Deployment Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="oi oi-info me-2" aria-hidden="true"></i>
                            Deployment Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Repository:</dt>
                                    <dd class="col-sm-7">@deployment.Repository</dd>

                                    <dt class="col-sm-5">Status:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge @GetStateClass(deployment.StatusCategory)">@deployment.DisplayStatus</span>
                                    </dd>

                                    <dt class="col-sm-5">Workflow:</dt>
                                    <dd class="col-sm-7">@deployment.WorkflowDisplayName</dd>

                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                    {
                                        <dt class="col-sm-5">Run Number:</dt>
                                        <dd class="col-sm-7">#@deployment.RunNumberDisplay</dd>
                                    }

                                    @if (!string.IsNullOrEmpty(deployment.DeploymentIdDisplay) && deployment.DeploymentIdDisplay != "N/A")
                                    {
                                        <dt class="col-sm-5">Deployment ID:</dt>
                                        <dd class="col-sm-7">@deployment.DeploymentIdDisplay</dd>
                                    }
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Created:</dt>
                                    <dd class="col-sm-7">
                                        <time datetime="@deployment.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                                            @deployment.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                                        </time>
                                    </dd>

                                    <dt class="col-sm-5">Last Updated:</dt>
                                    <dd class="col-sm-7">
                                        <time datetime="@deployment.UpdatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                                            @deployment.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                                        </time>
                                    </dd>

                                    @if (deployment.RunStartedAtDateTime.HasValue)
                                    {
                                        <dt class="col-sm-5">Started:</dt>
                                        <dd class="col-sm-7">
                                            <time datetime="@deployment.RunStartedAtDateTime.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                @deployment.RunStartedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                            </time>
                                        </dd>
                                    }

                                    @if (!string.IsNullOrEmpty(deployment.FormattedDuration) && deployment.FormattedDuration != "N/A")
                                    {
                                        <dt class="col-sm-5">Duration:</dt>
                                        <dd class="col-sm-7">
                                            <i class="oi oi-clock me-1" aria-hidden="true"></i>
                                            @deployment.FormattedDuration
                                        </dd>
                                    }

                                    <dt class="col-sm-5">Event Type:</dt>
                                    <dd class="col-sm-7">@deployment.EventType</dd>

                                    <dt class="col-sm-5">Trigger:</dt>
                                    <dd class="col-sm-7">
                                        <span class="badge bg-secondary">@deployment.TriggerType</span>
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(deployment.Note))
                        {
                            <div class="mt-3">
                                <h6>Notes:</h6>
                                <div class="alert alert-light">
                                    <i class="oi oi-note me-2" aria-hidden="true"></i>
                                    @deployment.Note
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Job Execution Details -->
                @if (jobInfos.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-cog me-2" aria-hidden="true"></i>
                                Job Execution Details
                            </h5>
                        </div>
                        <div class="card-body">
                            @{
                                var jobSummary = deployment.GetJobSummary();
                            }
                            <div class="row mb-4">
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Total Jobs</h6>
                                    <h4>@jobSummary.TotalJobs</h4>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Success Rate</h6>
                                    <h4 class="text-success">@($"{jobSummary.SuccessRate:F1}%")</h4>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Failed Jobs</h6>
                                    <h4 class="text-danger">@jobSummary.FailedJobs</h4>
                                </div>
                                <div class="col-md-3 text-center">
                                    <h6 class="text-muted">Total Duration</h6>
                                    <h4>@jobSummary.FormattedDuration</h4>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-sm" role="table" aria-label="Job execution details">
                                    <thead>
                                        <tr>
                                            <th scope="col">Job Name</th>
                                            <th scope="col">Status</th>
                                            <th scope="col">Conclusion</th>
                                            <th scope="col">Duration</th>
                                            <th scope="col">Runner</th>
                                            <th scope="col">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var job in jobInfos)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="text-truncate" style="max-width: 300px;" title="@job.name">
                                                        @job.name
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge @GetJobStatusClass(job.status)">@job.status</span>
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(job.conclusion))
                                                    {
                                                        <span class="badge @GetJobConclusionClass(job.conclusion)">@job.conclusion</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (job.duration_seconds.HasValue)
                                                    {
                                                        @TimeSpan.FromSeconds(job.duration_seconds.Value).ToString(@"hh\:mm\:ss")
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td><small>@job.runner_name</small></td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(job.html_url))
                                                    {
                                                        <a href="@job.html_url" 
                                                           target="_blank" 
                                                           rel="noopener noreferrer"
                                                           class="btn btn-sm btn-outline-primary"
                                                           aria-label="View job @job.name on GitHub">
                                                            <i class="oi oi-external-link" aria-hidden="true"></i>
                                                        </a>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

                <!-- Environment Status History -->
                @if (statusHistoryItems.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-clock me-2" aria-hidden="true"></i>
                                Environment Status History
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-sm" role="table" aria-label="Environment status history">
                                    <thead>
                                        <tr>
                                            <th scope="col">Environment</th>
                                            <th scope="col">Status</th>
                                            <th scope="col">Creator</th>
                                            <th scope="col">Updated At</th>
                                            <th scope="col">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var status in statusHistoryItems)
                                        {
                                            <tr>
                                                <td><span class="badge bg-info">@status.Environment</span></td>
                                                <td><span class="badge @GetStateClassForStatus(status.State)">@status.State</span></td>
                                                <td>@status.Creator</td>
                                                <td>
                                                    @if (status.UpdatedAtDateTime.HasValue)
                                                    {
                                                        <time datetime="@status.UpdatedAtDateTime.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                            @status.UpdatedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                                        </time>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(status.LogUrl))
                                                    {
                                                        <a href="@status.LogUrl" 
                                                           target="_blank" 
                                                           rel="noopener noreferrer"
                                                           class="btn btn-sm btn-outline-primary"
                                                           aria-label="View logs for @status.Environment environment">
                                                            <i class="oi oi-external-link me-1" aria-hidden="true"></i>Logs
                                                        </a>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

                <!-- Deployment History -->
                @if (deploymentHistoryItems.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-layers me-2" aria-hidden="true"></i>
                                Deployment History
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-sm" role="table" aria-label="Deployment history">
                                    <thead>
                                        <tr>
                                            <th scope="col">Environment</th>
                                            <th scope="col">Creator</th>
                                            <th scope="col">Branch/Ref</th>
                                            <th scope="col">Created</th>
                                            <th scope="col">Updated</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var info in deploymentHistoryItems)
                                        {
                                            <tr>
                                                <td><span class="badge bg-info">@info.Environment</span></td>
                                                <td>@info.Creator</td>
                                                <td><i class="oi oi-fork me-1" aria-hidden="true"></i>@info.Ref</td>
                                                <td>
                                                    @if (info.CreatedAtDateTime.HasValue)
                                                    {
                                                        <time datetime="@info.CreatedAtDateTime.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                            @info.CreatedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                                        </time>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (info.UpdatedAtDateTime.HasValue)
                                                    {
                                                        <time datetime="@info.UpdatedAtDateTime.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                            @info.UpdatedAtDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                                        </time>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Right Column - Quick Actions & Metadata -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="oi oi-dashboard me-2" aria-hidden="true"></i>
                            Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                            {
                                <a href="@deployment.WorkflowRunUrl" 
                                   target="_blank" 
                                   rel="noopener noreferrer"
                                   class="btn btn-primary"
                                   aria-label="View workflow run on GitHub">
                                    <i class="oi oi-external-link me-2" aria-hidden="true"></i>View Workflow Run
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(deployment.WorkflowUrl))
                            {
                                <a href="@deployment.WorkflowUrl" 
                                   target="_blank" 
                                   rel="noopener noreferrer"
                                   class="btn btn-outline-primary"
                                   aria-label="View workflow file on GitHub">
                                    <i class="oi oi-code me-2" aria-hidden="true"></i>View Workflow File
                                </a>
                            }
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="oi oi-tag me-2" aria-hidden="true"></i>
                            Metadata
                        </h6>
                    </div>
                    <div class="card-body">
                        <dl>
                            <dt>Row Key:</dt>
                            <dd><code>@deployment.RowKey</code></dd>
                            @if (!string.IsNullOrEmpty(deployment.WorkflowRunIdDisplay) && deployment.WorkflowRunIdDisplay != "N/A")
                            {
                                <dt>Workflow Run ID:</dt>
                                <dd><code>@deployment.WorkflowRunIdDisplay</code></dd>
                            }
                            @if (!string.IsNullOrEmpty(deployment.WorkflowPath))
                            {
                                <dt>Workflow Path:</dt>
                                <dd><code>@deployment.WorkflowPath</code></dd>
                            }
                            <dt>Event Type:</dt>
                            <dd><code>@deployment.EventType</code></dd>
                            <dt>Last Modified:</dt>
                            <dd>
                                @if (deployment.Timestamp.HasValue)
                                {
                                    <time datetime="@deployment.Timestamp.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                        @deployment.Timestamp.Value.ToString("yyyy-MM-dd HH:mm:ss")
                                    </time>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div class="row mt-4">
            <div class="col-12">
                <button class="btn btn-secondary" @onclick="NavigateBack" aria-label="Go back to deployments list">
                    <i class="oi oi-arrow-left me-2" aria-hidden="true"></i>Back to Deployments
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Repository { get; set; } = "";
    [Parameter] public string DeploymentId { get; set; } = "";

    private DeploymentState? deployment;
    private bool isLoading = true;
    private string? errorMessage = null;

    // Parsed data
    private List<JobInfo> jobInfos = new();
    private List<StatusHistoryItem> statusHistoryItems = new();
    private List<DeploymentHistoryInfo> deploymentHistoryItems = new();
    private List<EnvironmentStatus> environmentStatuses = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDeployment();
    }

    private async Task LoadDeployment()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            if (string.IsNullOrEmpty(Repository) || string.IsNullOrEmpty(DeploymentId))
            {
                errorMessage = "Invalid repository or deployment ID provided.";
                Logger.LogWarning("Invalid parameters: Repository={Repository}, DeploymentId={DeploymentId}", Repository, DeploymentId);
                return;
            }

            Logger.LogInformation("Loading deployment details for {Repository}/{DeploymentId}", Repository, DeploymentId);
            
            deployment = await StorageService.GetDeploymentAsync(Repository, DeploymentId);
            
            if (deployment == null)
            {
                Logger.LogWarning("Deployment not found: {Repository}/{DeploymentId}", Repository, DeploymentId);
                return;
            }

            // Parse related data
            ParseJobHistory();
            ParseStatusHistory();
            ParseDeploymentHistory();
            ParseEnvironmentStatuses();
            
            Logger.LogInformation("Successfully loaded deployment details for {Repository}/{DeploymentId}", Repository, DeploymentId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load deployment {Repository}/{DeploymentId}", Repository, DeploymentId);
            errorMessage = "Failed to load deployment details. Please try again or contact support if the problem persists.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RetryLoad()
    {
        await LoadDeployment();
    }

    #region Data Parsing Methods

    private void ParseJobHistory()
    {
        if (deployment == null || string.IsNullOrWhiteSpace(deployment.JobHistory))
        {
            jobInfos = new List<JobInfo>();
            return;
        }

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var jobs = JsonSerializer.Deserialize<JobInfo[]>(deployment.JobHistory, options);
            jobInfos = jobs?.ToList() ?? new List<JobInfo>();
            
            Logger.LogDebug("Parsed {JobCount} jobs from job history", jobInfos.Count);
        }
        catch (JsonException ex)
        {
            Logger.LogWarning(ex, "Failed to parse job history for deployment {Repository}/{DeploymentId}", Repository, DeploymentId);
            jobInfos = new List<JobInfo>();
        }
    }

    private void ParseStatusHistory()
    {
        if (deployment == null || string.IsNullOrWhiteSpace(deployment.StatusHistory))
        {
            statusHistoryItems = new List<StatusHistoryItem>();
            return;
        }

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var items = JsonSerializer.Deserialize<StatusHistoryItem[]>(deployment.StatusHistory, options);
            statusHistoryItems = items?.ToList() ?? new List<StatusHistoryItem>();
            
            Logger.LogDebug("Parsed {StatusCount} status history items", statusHistoryItems.Count);
        }
        catch (JsonException ex)
        {
            Logger.LogWarning(ex, "Failed to parse status history for deployment {Repository}/{DeploymentId}", Repository, DeploymentId);
            statusHistoryItems = new List<StatusHistoryItem>();
        }
    }

    private void ParseDeploymentHistory()
    {
        if (deployment == null || string.IsNullOrEmpty(deployment.DeploymentHistory))
        {
            deploymentHistoryItems = new List<DeploymentHistoryInfo>();
            return;
        }

        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            
            if (deployment.DeploymentHistory.TrimStart().StartsWith("["))
            {
                var array = JsonSerializer.Deserialize<DeploymentHistoryInfo[]>(deployment.DeploymentHistory, options);
                deploymentHistoryItems = array?.ToList() ?? new List<DeploymentHistoryInfo>();
            }
            else
            {
                var single = JsonSerializer.Deserialize<DeploymentHistoryInfo>(deployment.DeploymentHistory, options);
                deploymentHistoryItems = single != null ? new List<DeploymentHistoryInfo> { single } : new List<DeploymentHistoryInfo>();
            }
            
            Logger.LogDebug("Parsed {HistoryCount} deployment history items", deploymentHistoryItems.Count);
        }
        catch (JsonException ex)
        {
            Logger.LogWarning(ex, "Failed to parse deployment history for deployment {Repository}/{DeploymentId}", Repository, DeploymentId);
            deploymentHistoryItems = new List<DeploymentHistoryInfo>();
        }
    }

    private void ParseEnvironmentStatuses()
    {
        if (deployment == null)
        {
            environmentStatuses = new List<EnvironmentStatus>();
            return;
        }

        try
        {
            environmentStatuses = deployment.GetEnvironmentStatuses();
            Logger.LogDebug("Parsed {EnvironmentCount} environment statuses", environmentStatuses.Count);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to parse environment statuses for deployment {Repository}/{DeploymentId}", Repository, DeploymentId);
            environmentStatuses = new List<EnvironmentStatus>();
        }
    }

    #endregion

    #region Helper Methods

    private string GetStateClass(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "pending" => "bg-warning",
        "in_progress" => "bg-info",
        "cancelled" => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStateIcon(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "check",
        "failure" => "x",
        "pending" => "clock",
        "in_progress" => "reload",
        "cancelled" => "ban",
        _ => "question-mark"
    };

    private string GetStateClassForStatus(string status) => status?.ToLower() switch
    {
        "success" or "completed" => "bg-success",
        "failure" or "failed" => "bg-danger",
        "pending" or "waiting" or "queued" => "bg-warning",
        "in_progress" or "running" => "bg-info",
        "cancelled" or "canceled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetJobStatusClass(string status) => status?.ToLower() switch
    {
        "completed" => "bg-success",
        "in_progress" => "bg-info",
        "queued" => "bg-warning",
        "cancelled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetJobConclusionClass(string conclusion) => conclusion?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "cancelled" => "bg-secondary",
        "skipped" => "bg-light text-dark",
        _ => "bg-warning"
    };

    private void NavigateBack() => Navigation.NavigateTo("/deployments");

    #endregion
}