@page "/tab"
@page "/"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using MyM365Agent2.Components
@using System.Timers
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Index> Logger
@implements IDisposable

<PageTitle>GitHub Actions Dashboard</PageTitle>

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="jumbotron bg-light p-4 rounded-lg">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="display-5 mb-2">GitHub Actions Dashboard</h1>
                        <p class="lead mb-0">Monitor and track GitHub Action deployments across repositories and environments</p>
                        @if (lastRefresh.HasValue)
                        {
                            <small class="text-muted">
                                <i class="oi oi-clock me-1" aria-hidden="true"></i>
                                Last updated: @lastRefresh.Value.ToString("HH:mm:ss")
                            </small>
                        }
                    </div>
                    <div class="text-end">
                        <button class="btn btn-primary" @onclick="RefreshData" disabled="@isRefreshing" aria-label="Refresh deployment data">
                            @if (isRefreshing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            else
                            {
                                <i class="oi oi-reload me-2" aria-hidden="true"></i>
                            }
                            Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <i class="oi oi-warning me-2" aria-hidden="true"></i>
                    <strong>Warning:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close error message"></button>
                </div>
            </div>
        </div>
    }

    <!-- Repository and Environment Selector -->
    <RepoEnvironmentSelector 
        SelectedRepository="@selectedRepository"
        SelectedEnvironment="@selectedEnvironment"
        SelectedRepositoryChanged="@HandleRepositoryChanged"
        SelectedEnvironmentChanged="@HandleEnvironmentChanged"
        OnSelectionChanged="@OnFiltersChanged" />

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-center align-items-center py-5">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading deployment data...</span>
                        </div>
                        <h5 class="text-muted">Loading GitHub Actions deployments...</h5>
                        <p class="text-muted mb-0">Please wait while we fetch the latest data</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Quick Statistics -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="mb-3">
                    <i class="oi oi-graph me-2" aria-hidden="true"></i>
                    Deployment Overview
                    @if (HasActiveFilters())
                    {
                        <small class="text-muted">
                            (@dashboardStats.FilteredCount of @dashboardStats.TotalCount deployments)
                        </small>
                    }
                </h4>
            </div>
        </div>

        <div class="row mb-4">
            <!-- Total Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-primary h-100 hover-scale" role="region" aria-label="Total Actions">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Total Actions</h6>
                                <h2 class="mb-0">@dashboardStats.FilteredCount.ToString("N0")</h2>
                                <small>GitHub Action runs</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-layers" style="font-size: 2rem; opacity: 0.7;" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Successful Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-success h-100 hover-scale" role="region" aria-label="Successful Actions">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Successful</h6>
                                <h2 class="mb-0">@dashboardStats.SuccessfulCount.ToString("N0")</h2>
                                <small>@dashboardStats.SuccessRate.ToString("F1")% success rate</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-check" style="font-size: 2rem; opacity: 0.7;" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Failed Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-danger h-100 hover-scale" role="region" aria-label="Failed Actions">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Failed</h6>
                                <h2 class="mb-0">@dashboardStats.FailedCount.ToString("N0")</h2>
                                <small>@dashboardStats.FailureRate.ToString("F1")% failure rate</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-x" style="font-size: 2rem; opacity: 0.7;" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-warning h-100 hover-scale" role="region" aria-label="Active Actions">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Active</h6>
                                <h2 class="mb-0">@dashboardStats.ActiveCount.ToString("N0")</h2>
                                <small>Running or pending</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-clock" style="font-size: 2rem; opacity: 0.7;" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Repository Breakdown (when no specific repo selected) -->
        @if (string.IsNullOrEmpty(selectedRepository) && repositoryStats.Any())
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-code me-2" aria-hidden="true"></i>
                                Repository Deployment Summary
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" role="table" aria-label="Repository deployment statistics">
                                    <thead>
                                        <tr>
                                            <th scope="col">Repository</th>
                                            <th scope="col">Total Runs</th>
                                            <th scope="col">Success Rate</th>
                                            <th scope="col">Recent Activity</th>
                                            <th scope="col">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var repoStat in repositoryStats.Take(10))
                                        {
                                            <tr>
                                                <td>
                                                    <i class="oi oi-code me-2" aria-hidden="true"></i>
                                                    <strong>@repoStat.Key</strong>
                                                </td>
                                                <td>
                                                    <span class="badge bg-primary">@repoStat.Value["total"].ToString("N0")</span>
                                                </td>
                                                <td>
                                                    @{
                                                        var successRate = CalculateSuccessRate(repoStat.Value);
                                                    }
                                                    <div class="d-flex align-items-center">
                                                        <div class="progress flex-grow-1 me-2" style="height: 8px;" 
                                                             role="progressbar" 
                                                             aria-valuenow="@successRate" 
                                                             aria-valuemin="0" 
                                                             aria-valuemax="100"
                                                             aria-label="Success rate: @successRate.ToString("F1")%">
                                                            <div class="progress-bar @GetSuccessRateClass(successRate)" 
                                                                 style="width: @(successRate)%"></div>
                                                        </div>
                                                        <small class="text-muted">@successRate.ToString("F1")%</small>
                                                    </div>
                                                </td>
                                                <td>
                                                    @{
                                                        var lastDeployment = GetLastDeploymentForRepo(repoStat.Key);
                                                    }
                                                    @if (lastDeployment != null)
                                                    {
                                                        <span class="badge @GetStateClass(lastDeployment.StatusCategory)">
                                                            @lastDeployment.DisplayStatus
                                                        </span>
                                                        <br />
                                                        <small class="text-muted">@lastDeployment.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">No recent activity</span>
                                                    }
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => SelectRepository(repoStat.Key)"
                                                            aria-label="View details for @repoStat.Key repository">
                                                        <i class="oi oi-eye me-1" aria-hidden="true"></i>
                                                        View Details
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Recent Deployments -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="oi oi-list-rich me-2" aria-hidden="true"></i>
                                Recent GitHub Actions
                                @if (!string.IsNullOrEmpty(selectedRepository))
                                {
                                    <span class="badge bg-primary ms-2">@selectedRepository</span>
                                }
                                @if (!string.IsNullOrEmpty(selectedEnvironment))
                                {
                                    <span class="badge bg-info ms-2">@selectedEnvironment</span>
                                }
                            </h5>
                            <div class="d-flex gap-2">
                                <a href="/deployments" class="btn btn-sm btn-outline-primary" aria-label="View all deployments">
                                    <i class="oi oi-list me-1" aria-hidden="true"></i>
                                    View All
                                </a>
                                <div class="btn-group btn-group-sm" role="group" aria-label="Filter by status">
                                    <button 
                                        class='btn @(statusFilter == "" ? "btn-primary" : "btn-outline-primary")'
                                        @onclick='() => SetStatusFilter("")'
                                        aria-pressed="@(statusFilter == "")">
                                        All
                                    </button>
                                    <button 
                                        class='btn @(statusFilter == "success" ? "btn-success" : "btn-outline-success")'
                                        @onclick='() => SetStatusFilter("success")'
                                        aria-pressed="@(statusFilter == "success")">
                                        Success
                                    </button>
                                    <button 
                                        class='btn @(statusFilter == "failure" ? "btn-danger" : "btn-outline-danger")'
                                        @onclick='() => SetStatusFilter("failure")'
                                        aria-pressed="@(statusFilter == "failure")">
                                        Failed
                                    </button>
                                    <button 
                                        class='btn @(statusFilter == "pending" ? "btn-warning" : "btn-outline-warning")'
                                        @onclick='() => SetStatusFilter("pending")'
                                        aria-pressed="@(statusFilter == "pending")">
                                        Active
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (displayedDeployments.Any())
                        {
                            <div class="list-group list-group-flush" role="list" aria-label="Recent deployments">
                                @foreach (var deployment in displayedDeployments.Take(15))
                                {
                                    <div class="list-group-item list-group-item-action" role="listitem">
                                        <div class="d-flex w-100 justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <h6 class="mb-0 fw-bold">
                                                        <i class="oi oi-code me-2 text-primary" aria-hidden="true"></i>
                                                        @deployment.Repository
                                                        @if (!string.IsNullOrEmpty(deployment.WorkflowDisplayName))
                                                        {
                                                            <span class="text-muted"> / @deployment.WorkflowDisplayName</span>
                                                        }
                                                    </h6>
                                                    <small class="text-muted">
                                                        <time datetime="@deployment.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                                                            @deployment.CreatedAt.ToString("MMM dd, HH:mm")
                                                        </time>
                                                    </small>
                                                </div>
                                                
                                                <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                                    <span class="badge bg-info">
                                                        <i class="oi oi-globe me-1" aria-hidden="true"></i>
                                                        @deployment.Environment
                                                    </span>
                                                    <span class="badge @GetStateClass(deployment.StatusCategory)" 
                                                          aria-label="Status: @deployment.DisplayStatus">
                                                        <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1" aria-hidden="true"></i>
                                                        @deployment.DisplayStatus
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(deployment.Branch))
                                                    {
                                                        <span class="badge bg-secondary">
                                                            <i class="oi oi-fork me-1" aria-hidden="true"></i>
                                                            @deployment.Branch
                                                        </span>
                                                    }
                                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                                    {
                                                        <span class="badge bg-light text-dark">
                                                            <i class="oi oi-tag me-1" aria-hidden="true"></i>
                                                            Run #@deployment.RunNumberDisplay
                                                        </span>
                                                    }
                                                </div>
                                                
                                                <div class="d-flex flex-wrap align-items-center gap-3 text-muted">
                                                    <small>
                                                        <i class="oi oi-person me-1" aria-hidden="true"></i>
                                                        @deployment.CreatorLogin
                                                    </small>
                                                    @if (!string.IsNullOrEmpty(deployment.FormattedDuration))
                                                    {
                                                        <small>
                                                            <i class="oi oi-clock me-1" aria-hidden="true"></i>
                                                            @deployment.FormattedDuration
                                                        </small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(deployment.TriggerType))
                                                    {
                                                        <small>
                                                            <i class="oi oi-flash me-1" aria-hidden="true"></i>
                                                            @deployment.TriggerType
                                                        </small>
                                                    }
                                                </div>
                                            </div>
                                            
                                            <div class="ms-3 d-flex flex-column gap-1">
                                                @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                                {
                                                    <a href="@deployment.WorkflowRunUrl" 
                                                       target="_blank" 
                                                       rel="noopener noreferrer"
                                                       class="btn btn-sm btn-outline-primary"
                                                       aria-label="View @deployment.Repository run on GitHub">
                                                        <i class="oi oi-external-link me-1" aria-hidden="true"></i>
                                                        GitHub
                                                    </a>
                                                }
                                                <a href="@GetDetailsUrl(deployment)" 
                                                   class="btn btn-sm btn-primary"
                                                   aria-label="View details for @deployment.Repository deployment">
                                                    <i class="oi oi-eye me-1" aria-hidden="true"></i>
                                                    Details
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            @if (displayedDeployments.Count > 15)
                            {
                                <div class="card-footer text-center">
                                    <a href="/deployments" 
                                       class="btn btn-outline-primary"
                                       aria-label="View all @displayedDeployments.Count deployments">
                                        <i class="oi oi-list me-2" aria-hidden="true"></i>
                                        View All @displayedDeployments.Count.ToString("N0") Deployments
                                    </a>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="oi oi-info mb-3 text-muted" style="font-size: 3rem;" aria-hidden="true"></i>
                                <h5 class="text-muted">No GitHub Actions Found</h5>
                                <p class="text-muted mb-0">
                                    @if (HasActiveFilters())
                                    {
                                        <text>No deployments match your current filters. Try adjusting your selection.</text>
                                    }
                                    else
                                    {
                                        <text>No deployment data available. Connect your GitHub repositories to start monitoring.</text>
                                    }
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // State management
    private DashboardState dashboardState = new();
    private List<DeploymentState> allDeployments = new();
    private List<DeploymentState> filteredDeployments = new();
    private List<DeploymentState> displayedDeployments = new();
    private Dictionary<string, Dictionary<string, int>> repositoryStats = new();
    
    // Computed stats
    private DashboardStats dashboardStats = new();
    
    // UI state
    private string selectedRepository = "";
    private string selectedEnvironment = "";
    private string statusFilter = "";
    private string? errorMessage = null;
    private bool isLoading = true;
    private bool isRefreshing = false;
    private DateTime? lastRefresh = null;
    
    // Timer management
    private Timer? refreshTimer;
    private readonly object timerLock = new();
    private bool isDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
            SetupAutoRefresh();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize dashboard");
            errorMessage = "Failed to load initial data. Please try refreshing the page.";
        }
    }

    #region Data Loading and Management

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            var deploymentsTask = StorageService.GetDeploymentsAsync();
            var statsTask       = StorageService.GetRepositoryStatisticsAsync();
            await Task.WhenAll(deploymentsTask, statsTask);
            
            allDeployments = await deploymentsTask;
            repositoryStats = await statsTask;
            
            ApplyFilters();
            CalculateDashboardStats();
            lastRefresh = DateTime.Now;
            
            Logger.LogInformation("Dashboard data loaded successfully. {DeploymentCount} deployments found.", allDeployments.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load dashboard data");
            errorMessage = "Failed to load deployment data. Please check your connection and try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateDashboardStats()
    {
        dashboardStats = new DashboardStats
        {
            TotalCount = allDeployments.Count,
            FilteredCount = filteredDeployments.Count,
            SuccessfulCount = filteredDeployments.Count(d => d.StatusCategory == "success"),
            FailedCount = filteredDeployments.Count(d => d.StatusCategory == "failure"),
            ActiveCount = filteredDeployments.Count(d => d.StatusCategory == "pending" || d.StatusCategory == "in_progress")
        };

        if (dashboardStats.FilteredCount > 0)
        {
            dashboardStats.SuccessRate = (double)dashboardStats.SuccessfulCount / dashboardStats.FilteredCount * 100;
            dashboardStats.FailureRate = (double)dashboardStats.FailedCount / dashboardStats.FilteredCount * 100;
        }
    }

    #endregion

    #region Timer Management

    private void SetupAutoRefresh()
    {
        lock (timerLock)
        {
            if (isDisposed) return;
            
            refreshTimer?.Dispose();
            refreshTimer = new Timer(60000); // Refresh every minute
            refreshTimer.Elapsed += OnTimerElapsed;
            refreshTimer.Start();
            
            Logger.LogDebug("Auto-refresh timer started");
        }
    }

    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (isDisposed || isLoading || isRefreshing) return;
        
        try
        {
            await InvokeAsync(async () =>
            {
                isRefreshing = true;
                StateHasChanged();
                
                await LoadData();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Auto-refresh failed");
            // Don't show error to user for auto-refresh failures
        }
        finally
        {
            isRefreshing = false;
        }
    }

    #endregion

    #region Event Handlers

    private async Task HandleRepositoryChanged(string repository)
    {
        selectedRepository = repository;
        await OnFiltersChanged();
    }

    private async Task HandleEnvironmentChanged(string environment)
    {
        selectedEnvironment = environment;
        await OnFiltersChanged();
    }

    private async Task OnFiltersChanged()
    {
        ApplyFilters();
        CalculateDashboardStats();
        await InvokeAsync(StateHasChanged);
        
        Logger.LogDebug("Filters changed: Repository={Repository}, Environment={Environment}", 
            selectedRepository, selectedEnvironment);
    }

    private async Task RefreshData()
    {
        if (isRefreshing) return;
        
        isRefreshing = true;
        
        try
        {
            await LoadData();
        }
        finally
        {
            isRefreshing = false;
        }
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    #endregion

    #region Filter and Display Logic

    private void ApplyFilters()
    {
        filteredDeployments = allDeployments.ToList();

        if (!string.IsNullOrEmpty(selectedRepository))
        {
            filteredDeployments = filteredDeployments.Where(d => 
                string.Equals(d.Repository, selectedRepository, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrEmpty(selectedEnvironment))
        {
            filteredDeployments = filteredDeployments.Where(d => 
                string.Equals(d.Environment, selectedEnvironment, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        ApplyStatusFilter();
    }

    private void ApplyStatusFilter()
    {
        displayedDeployments = filteredDeployments.ToList();

        if (!string.IsNullOrEmpty(statusFilter))
        {
            if (statusFilter == "pending")
            {
                displayedDeployments = displayedDeployments.Where(d => 
                    d.StatusCategory == "pending" || d.StatusCategory == "in_progress").ToList();
            }
            else
            {
                displayedDeployments = displayedDeployments.Where(d => 
                    d.StatusCategory == statusFilter).ToList();
            }
        }

        displayedDeployments = displayedDeployments
            .OrderByDescending(d => d.CreatedAt)
            .ToList();
    }

    private void SetStatusFilter(string filter)
    {
        statusFilter = filter;
        ApplyStatusFilter();
    }

    private void SelectRepository(string repository)
    {
        selectedRepository = repository;
        _ = OnFiltersChanged();
    }

    #endregion

    #region Helper Methods

    private bool HasActiveFilters() => 
        !string.IsNullOrEmpty(selectedRepository) || 
        !string.IsNullOrEmpty(selectedEnvironment);

    private string GetDetailsUrl(DeploymentState deployment) => 
        $"/deployments/{deployment.Repository}/{deployment.RowKey}";

    private double CalculateSuccessRate(Dictionary<string, int> stats)
    {
        var total = stats.GetValueOrDefault("total", 0);
        var success = stats.GetValueOrDefault("success", 0);
        return total > 0 ? Math.Round((double)success / total * 100, 1) : 0;
    }

    private string GetSuccessRateClass(double successRate) => successRate switch
    {
        >= 80 => "bg-success",
        >= 60 => "bg-warning",
        _ => "bg-danger"
    };

    private DeploymentState? GetLastDeploymentForRepo(string repository) =>
        allDeployments
            .Where(d => string.Equals(d.Repository, repository, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(d => d.CreatedAt)
            .FirstOrDefault();

    private string GetStateClass(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "bg-success",
        "failure" => "bg-danger",
        "pending" => "bg-warning",
        "in_progress" => "bg-info",
        "cancelled" => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStateIcon(string statusCategory) => statusCategory?.ToLower() switch
    {
        "success" => "check",
        "failure" => "x",
        "pending" => "clock",
        "in_progress" => "reload",
        "cancelled" => "ban",
        _ => "question-mark"
    };

    #endregion

    #region Disposal

    public void Dispose()
    {
        lock (timerLock)
        {
            isDisposed = true;
            refreshTimer?.Stop();
            refreshTimer?.Dispose();
            refreshTimer = null;
        }
        
        Logger.LogDebug("Dashboard component disposed");
    }

    #endregion

    #region Data Classes

    private class DashboardState
    {
        public List<DeploymentState> AllDeployments { get; set; } = new();
        public Dictionary<string, Dictionary<string, int>> RepositoryStats { get; set; } = new();
    }

    private class DashboardStats
    {
        public int TotalCount { get; set; }
        public int FilteredCount { get; set; }
        public int SuccessfulCount { get; set; }
        public int FailedCount { get; set; }
        public int ActiveCount { get; set; }
        public double SuccessRate { get; set; }
        public double FailureRate { get; set; }
    }

    #endregion
}