@page "/tab"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using MyM365Agent2.Components
@using System.Timers
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="jumbotron bg-light p-4 rounded-lg">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="display-5 mb-2">GitHub Actions Dashboard</h1>
                        <p class="lead mb-0">Monitor and track GitHub Action deployments across repositories and environments</p>
                    </div>
                    <div class="text-end">
                        <button class="btn btn-primary" @onclick="RefreshData" disabled="@isLoading">
                            <i class="oi oi-reload me-2"></i>
                            @(isLoading ? "Loading..." : "Refresh")
                        </button>
                        <button class="btn btn-outline-secondary ms-2" @onclick="TestConnection">
                            <i class="oi oi-wrench me-2"></i>
                            Test Connection
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Display -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="oi oi-warning me-2"></i>
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="ClearError"></button>
                </div>
            </div>
        </div>
    }

    <!-- Diagnostic Information -->
    @if (showDiagnostics)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="oi oi-info me-2"></i>
                            Diagnostic Information
                        </h6>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-3">Connection Status:</dt>
                            <dd class="col-sm-9">
                                <span class="badge @(connectionStatus == "Connected" ? "bg-success" : "bg-danger")">
                                    @connectionStatus
                                </span>
                            </dd>
                            
                            <dt class="col-sm-3">Table Name:</dt>
                            <dd class="col-sm-9"><code>@tableName</code></dd>
                            
                            <dt class="col-sm-3">Storage Account:</dt>
                            <dd class="col-sm-9"><code>@storageAccount</code></dd>
                            
                            <dt class="col-sm-3">Total Records:</dt>
                            <dd class="col-sm-9">@totalRecords</dd>
                            
                            <dt class="col-sm-3">Last Refresh:</dt>
                            <dd class="col-sm-9">@lastRefresh</dd>
                        </dl>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => showDiagnostics = false">
                            Hide Diagnostics
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Repository and Environment Selector -->
    <RepoEnvironmentSelector 
        SelectedRepository="@selectedRepository"
        SelectedEnvironment="@selectedEnvironment"
        SelectedRepositoryChanged="@((string repo) => { selectedRepository = repo; })"
        SelectedEnvironmentChanged="@((string env) => { selectedEnvironment = env; })"
        OnSelectionChanged="@OnFiltersChanged" />

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading deployment data...</span>
                </div>
                <p class="mt-3 text-muted">@loadingMessage</p>
            </div>
        </div>
    }
    else if (allDeployments.Count == 0)
    {
        <!-- No Data State -->
        <div class="row">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-body text-center py-5">
                        <i class="oi oi-info mb-3 text-warning" style="font-size: 4rem;"></i>
                        <h4 class="text-warning">No GitHub Actions Data Found</h4>
                        <p class="text-muted mb-4">
                            The Azure Table Storage table appears to be empty or there may be a connection issue.
                        </p>
                        <div class="d-flex justify-content-center gap-2">
                            <button class="btn btn-primary" @onclick="RefreshData">
                                <i class="oi oi-reload me-2"></i>
                                Retry Loading
                            </button>
                            <button class="btn btn-outline-info" @onclick="() => showDiagnostics = true">
                                <i class="oi oi-info me-2"></i>
                                Show Diagnostics
                            </button>
                        </div>
                        
                        <div class="mt-4">
                            <h6>Possible Causes:</h6>
                            <ul class="text-start d-inline-block">
                                <li>No GitHub Actions data has been imported to the table</li>
                                <li>Azure Table Storage connection issues</li>
                                <li>Incorrect table name or storage account configuration</li>
                                <li>Permissions issues with the storage account</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Rest of the existing dashboard content -->
        <!-- Quick Statistics -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="mb-3">
                    <i class="oi oi-graph me-2"></i>
                    Deployment Overview
                    @if (!string.IsNullOrEmpty(selectedRepository) || !string.IsNullOrEmpty(selectedEnvironment))
                    {
                        <small class="text-muted">
                            (@filteredDeployments.Count of @allDeployments.Count deployments)
                        </small>
                    }
                </h4>
            </div>
        </div>

        <div class="row mb-4">
            <!-- Total Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-primary h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Total Actions</h6>
                                <h2 class="mb-0">@filteredDeployments.Count</h2>
                                <small>GitHub Action runs</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-layers" style="font-size: 2rem; opacity: 0.7;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Successful Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-success h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Successful</h6>
                                <h2 class="mb-0">@GetSuccessfulCount()</h2>
                                <small>@GetSuccessRate()% success rate</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-check" style="font-size: 2rem; opacity: 0.7;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Failed Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-danger h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Failed</h6>
                                <h2 class="mb-0">@GetFailedCount()</h2>
                                <small>@GetFailureRate()% failure rate</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-x" style="font-size: 2rem; opacity: 0.7;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Deployments -->
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card text-white bg-warning h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Active</h6>
                                <h2 class="mb-0">@GetActiveCount()</h2>
                                <small>Running or pending</small>
                            </div>
                            <div class="align-self-center">
                                <i class="oi oi-clock" style="font-size: 2rem; opacity: 0.7;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Repository Breakdown -->
        @if (string.IsNullOrEmpty(selectedRepository) && repositoryStats.Any())
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="oi oi-code me-2"></i>
                                Repository Deployment Summary
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Repository</th>
                                            <th>Total Runs</th>
                                            <th>Success Rate</th>
                                            <th>Recent Activity</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var repoStat in repositoryStats.Take(10))
                                        {
                                            <tr>
                                                <td>
                                                    <i class="oi oi-code me-2"></i>
                                                    <strong>@repoStat.Key</strong>
                                                </td>
                                                <td>
                                                    <span class="badge bg-primary">@repoStat.Value["total"]</span>
                                                </td>
                                                <td>
                                                    @{
                                                        var successRate = repoStat.Value["total"] > 0 
                                                            ? (repoStat.Value["success"] * 100.0 / repoStat.Value["total"]) 
                                                            : 0;
                                                    }
                                                    <div class="d-flex align-items-center">
                                                        <div class="progress flex-grow-1 me-2" style="height: 8px;">
                                                            <div class="progress-bar @(successRate >= 80 ? "bg-success" : successRate >= 60 ? "bg-warning" : "bg-danger")" 
                                                                 style="width: @(successRate)%"></div>
                                                        </div>
                                                        <small class="text-muted">
                                                            @($"{successRate:F1}%")
                                                        </small>
                                                    </div>
                                                </td>
                                                <td>
                                                    @{
                                                        var lastDeployment = allDeployments
                                                            .Where(d => d.Repository == repoStat.Key)
                                                            .OrderByDescending(d => d.CreatedAt)
                                                            .FirstOrDefault();
                                                    }
                                                    @if (lastDeployment != null)
                                                    {
                                                        <span class="badge @GetStateClass(lastDeployment.StatusCategory)">
                                                            @lastDeployment.DisplayStatus
                                                        </span>
                                                        <br />
                                                        <small class="text-muted">@lastDeployment.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                                    }
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => SelectRepository(repoStat.Key)">
                                                        <i class="oi oi-eye me-1"></i>
                                                        View Details
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Recent Deployments -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="oi oi-list-rich me-2"></i>
                                Recent GitHub Actions
                                @if (!string.IsNullOrEmpty(selectedRepository))
                                {
                                    <span class="badge bg-primary ms-2">@selectedRepository</span>
                                }
                                @if (!string.IsNullOrEmpty(selectedEnvironment))
                                {
                                    <span class="badge bg-info ms-2">@selectedEnvironment</span>
                                }
                            </h5>
                            <div>
                                <button 
                                    class="btn btn-sm btn-outline-primary me-2" 
                                    @onclick='() => Navigation.NavigateTo("/deployments")'>
                                    <i class="oi oi-list me-1"></i>
                                    View All
                                </button>
                                 <div class="btn-group btn-group-sm" role="group">
                                    <button 
                                        class='btn @(statusFilter == "" ? "btn-primary" : "btn-outline-primary")'
                                        @onclick='() => SetStatusFilter("")'>
                                        All
                                    </button>
                                    <button 
                                        class='btn @(statusFilter == "success" ? "btn-success" : "btn-outline-success")'
                                        @onclick='() => SetStatusFilter("success")'>
                                        Success
                                    </button>
                                    <button 
                                        class='btn @(statusFilter == "failure" ? "btn-danger" : "btn-outline-danger")'
                                        @onclick='() => SetStatusFilter("failure")'>
                                        Failed
                                    </button>
                                    <button 
                                        class='btn @(statusFilter == "pending" ? "btn-warning" : "btn-outline-warning")'
                                        @onclick='() => SetStatusFilter("pending")'>
                                        Active
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (displayedDeployments.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var deployment in displayedDeployments.Take(15))
                                {
                                    <div class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <h6 class="mb-0 fw-bold">
                                                        <i class="oi oi-code me-2 text-primary"></i>
                                                        @deployment.Repository
                                                        @if (!string.IsNullOrEmpty(deployment.WorkflowDisplayName))
                                                        {
                                                            <span class="text-muted"> / @deployment.WorkflowDisplayName</span>
                                                        }
                                                    </h6>
                                                    <small class="text-muted">@deployment.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                                </div>
                                                
                                                <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                                    <span class="badge bg-info">
                                                        <i class="oi oi-globe me-1"></i>
                                                        @deployment.Environment
                                                    </span>
                                                    <span class="badge @GetStateClass(deployment.StatusCategory)">
                                                        <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1"></i>
                                                        @deployment.DisplayStatus
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(deployment.Branch))
                                                    {
                                                        <span class="badge bg-secondary">
                                                            <i class="oi oi-fork me-1"></i>
                                                            @deployment.Branch
                                                        </span>
                                                    }
                                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                                    {
                                                        <span class="badge bg-light text-dark">
                                                            <i class="oi oi-tag me-1"></i>
                                                            Run #@deployment.RunNumberDisplay
                                                        </span>
                                                    }
                                                </div>
                                                
                                                <div class="d-flex flex-wrap align-items-center gap-3 text-muted">
                                                    <small>
                                                        <i class="oi oi-person me-1"></i>
                                                        @deployment.CreatorLogin
                                                    </small>
                                                    @if (!string.IsNullOrEmpty(deployment.FormattedDuration))
                                                    {
                                                        <small>
                                                            <i class="oi oi-clock me-1"></i>
                                                            @deployment.FormattedDuration
                                                        </small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(deployment.TriggerType))
                                                    {
                                                        <small>
                                                            <i class="oi oi-flash me-1"></i>
                                                            @deployment.TriggerType
                                                        </small>
                                                    }
                                                </div>
                                            </div>
                                            
                                            <div class="ms-3 d-flex flex-column gap-1">
                                                @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                                {
                                                    <a href="@deployment.WorkflowRunUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                                                        <i class="oi oi-external-link me-1"></i>
                                                        GitHub
                                                    </a>
                                                }
                                            <button 
                                                class="btn btn-sm btn-primary"
                                                @onclick="@(() => Navigation.NavigateTo(GetDetailsUrl(deployment)))">
                                              <i class="oi oi-eye me-1"></i>
                                              Details
                                            </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            @if (displayedDeployments.Count > 15)
                            {
                                <div class="card-footer text-center">
                                    <button 
                                        class="btn btn-outline-primary" 
                                        @onclick='() => Navigation.NavigateTo("/deployments")'>
                                        <i class="oi oi-list me-2"></i>
                                        View All @displayedDeployments.Count Deployments
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="oi oi-info mb-3 text-muted" style="font-size: 3rem;"></i>
                                <h5 class="text-muted">No GitHub Actions Found</h5>
                                <p class="text-muted mb-0">
                                    @if (!string.IsNullOrEmpty(selectedRepository) || !string.IsNullOrEmpty(selectedEnvironment))
                                    {
                                        <text>No deployments match your current filters. Try adjusting your selection.</text>
                                    }
                                    else
                                    {
                                        <text>No deployment data available. Connect your GitHub repositories to start monitoring.</text>
                                    }
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<DeploymentState> allDeployments = new();
    private List<DeploymentState> filteredDeployments = new();
    private List<DeploymentState> displayedDeployments = new();
    private Dictionary<string, Dictionary<string, int>> repositoryStats = new();
    
    private string selectedRepository = "";
    private string selectedEnvironment = "";
    private string statusFilter = "";
    private bool isLoading = true;
    private Timer refreshTimer;
    
    // Diagnostic properties
    private string errorMessage = "";
    private bool showDiagnostics = false;
    private string connectionStatus = "Unknown";
    private string tableName = "Unknown";
    private string storageAccount = "Unknown";
    private int totalRecords = 0;
    private string lastRefresh = "Never";
    private string loadingMessage = "Loading deployment data...";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetupAutoRefresh();
    }

    string GetDetailsUrl(DeploymentState d) 
        => $"/deployments/{d.Repository}/{d.RowKey}";

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = "";
        loadingMessage = "Connecting to Azure Table Storage...";
        
        try
        {
            loadingMessage = "Fetching deployment data...";
            allDeployments = await StorageService.GetDeploymentsAsync();
            totalRecords = allDeployments.Count;
            
            loadingMessage = "Loading repository statistics...";
            repositoryStats = await StorageService.GetRepositoryStatisticsAsync();
            
            connectionStatus = "Connected";
            lastRefresh = DateTime.Now.ToString("HH:mm:ss");
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
            connectionStatus = "Error";
            Console.WriteLine($"Error loading data: {ex}");
            
            // Initialize empty collections to prevent null reference errors
            allDeployments = new List<DeploymentState>();
            repositoryStats = new Dictionary<string, Dictionary<string, int>>();
            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task TestConnection()
    {
        loadingMessage = "Testing Azure Table Storage connection...";
        isLoading = true;
        errorMessage = "";
        
        try
        {
            // Extract connection info for diagnostics
            var connectionString = ""; // We'll need to get this from the service
            if (connectionString.Contains("AccountName="))
            {
                var accountStart = connectionString.IndexOf("AccountName=") + 12;
                var accountEnd = connectionString.IndexOf(";", accountStart);
                storageAccount = connectionString.Substring(accountStart, accountEnd - accountStart);
            }
            
            tableName = "GitHubDeployments"; // Default table name
            
            // Test the connection by attempting to get a count
            var testDeployments = await StorageService.GetDeploymentsAsync();
            totalRecords = testDeployments.Count;
            
            connectionStatus = "Connected";
            showDiagnostics = true;
            
            if (totalRecords == 0)
            {
                errorMessage = "Connection successful, but no data found in the table. The table might be empty.";
            }
        }
        catch (Exception ex)
        {
            connectionStatus = "Failed";
            errorMessage = $"Connection test failed: {ex.Message}";
            showDiagnostics = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    private void SetupAutoRefresh()
    {
        refreshTimer = new Timer(60000); // Refresh every minute
        refreshTimer.Elapsed += async (sender, e) => await InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();
        });
        refreshTimer.Start();
    }

    private async Task OnFiltersChanged()
    {
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private void ApplyFilters()
    {
        filteredDeployments = allDeployments.ToList();

        if (!string.IsNullOrEmpty(selectedRepository))
        {
            filteredDeployments = filteredDeployments.Where(d => d.Repository == selectedRepository).ToList();
        }

        if (!string.IsNullOrEmpty(selectedEnvironment))
        {
            filteredDeployments = filteredDeployments.Where(d => d.Environment == selectedEnvironment).ToList();
        }

        ApplyStatusFilter();
    }

    private void ApplyStatusFilter()
    {
        displayedDeployments = filteredDeployments.ToList();

        if (!string.IsNullOrEmpty(statusFilter))
        {
            displayedDeployments = displayedDeployments.Where(d => d.StatusCategory == statusFilter).ToList();
        }

        displayedDeployments = displayedDeployments.OrderByDescending(d => d.CreatedAt).ToList();
    }

    private void SetStatusFilter(string filter)
    {
        statusFilter = filter;
        ApplyStatusFilter();
    }

    private void SelectRepository(string repository)
    {
        selectedRepository = repository;
        OnFiltersChanged();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private int GetSuccessfulCount() => filteredDeployments.Count(d => d.StatusCategory == "success");
    private int GetFailedCount() => filteredDeployments.Count(d => d.StatusCategory == "failure");
    private int GetActiveCount() => filteredDeployments.Count(d => d.StatusCategory == "pending" || d.StatusCategory == "in_progress");

    private string GetSuccessRate()
    {
        if (filteredDeployments.Count == 0) return "0";
        return Math.Round((GetSuccessfulCount() * 100.0) / filteredDeployments.Count, 1).ToString("0.#");
    }

    private string GetFailureRate()
    {
        if (filteredDeployments.Count == 0) return "0";
        return Math.Round((GetFailedCount() * 100.0) / filteredDeployments.Count, 1).ToString("0.#");
    }

    private string GetStateClass(string statusCategory)
    {
        return statusCategory?.ToLower() switch
        {
            "success" => "bg-success",
            "failure" => "bg-danger",
            "pending" => "bg-warning",
            "in_progress" => "bg-info",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStateIcon(string statusCategory)
    {
        return statusCategory?.ToLower() switch
        {
            "success" => "check",
            "failure" => "x",
            "pending" => "clock",
            "in_progress" => "reload",
            "cancelled" => "ban",
            _ => "question-mark"
        };
    }

    public void Dispose()
    {
        refreshTimer?.Stop();
        refreshTimer?.Dispose();
    }
}