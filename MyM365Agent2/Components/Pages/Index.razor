@page "/"
@page "/tab"
@using MyM365Agent2.Common.Models
@using MyM365Agent2.Services
@using MyM365Agent2.Components
@using System.Timers
@inject IAzureTableStorageService StorageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="mb-1">GitHub Actions</h1>
                    <p class="text-muted mb-0">Monitor workflow runs across your repositories</p>
                </div>
                <button class="btn btn-primary" @onclick="RefreshData">
                    <i class="oi oi-reload me-2"></i>
                    Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading workflows...</span>
                </div>
                <p class="mt-3 text-muted">Loading GitHub Actions...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Filters Row 1: Repository and Environment -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Repository</label>
                                <select class="form-select" @onchange="OnRepositoryChanged" value="@selectedRepository">
                                    <option value="">All Repositories</option>
                                    @foreach (var repo in availableRepositories)
                                    {
                                        <option value="@repo">@repo</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Environment</label>
                                <select class="form-select" @onchange="OnEnvironmentChanged" value="@selectedEnvironment">
                                    <option value="">All Environments</option>
                                    @foreach (var env in availableEnvironments)
                                    {
                                        <option value="@env">@env</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters Row 2: Status Filter and Search -->
        <div class="row mb-4">
            <div class="col-md-7">
                <div class="card">
                    <div class="card-body">
                        <label class="form-label fw-bold">Status Filter</label>
                        <div class="btn-group w-100" role="group">
                            <button class="btn @(statusFilter == "" ? "btn-primary" : "btn-outline-primary")"
                                    @onclick="@(() => SetStatusFilter(""))">
                                All (@GetTotalCount())
                            </button>
                            <button class="btn @(statusFilter == "success" ? "btn-success" : "btn-outline-success")"
                                    @onclick="@(() => SetStatusFilter("success"))">
                                Success (@GetStatusCount("success"))
                            </button>
                            <button class="btn @(statusFilter == "failure" ? "btn-danger" : "btn-outline-danger")"
                                    @onclick="@(() => SetStatusFilter("failure"))">
                                Failed (@GetStatusCount("failure"))
                            </button>
                            <button class="btn @(statusFilter == "pending" ? "btn-warning" : "btn-outline-warning")"
                                    @onclick="@(() => SetStatusFilter("pending"))">
                                Active (@GetStatusCount("pending"))
                            </button>
                            <button class="btn @(statusFilter == "in_progress" ? "btn-info" : "btn-outline-info")"
                                    @onclick="@(() => SetStatusFilter("in_progress"))">
                                Running (@GetStatusCount("in_progress"))
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-5">
                <div class="card">
                    <div class="card-body">
                        <label class="form-label fw-bold">Search</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="oi oi-magnifying-glass"></i>
                            </span>
                            <input type="text" class="form-control"
                                   placeholder="Search workflows, branches, creators..."
                                   @bind="searchTerm" @onkeyup="OnSearchChanged" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="oi oi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sort By Row -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <label class="form-label fw-bold mb-1">Sort By</label>
                                <select class="form-select" @onchange="OnSortChanged" value="@($"{sortField}_{(sortAscending ? "asc" : "desc")}")">
                                    <option value="CreatedAt_desc">Latest First</option>
                                    <option value="CreatedAt_asc">Oldest First</option>
                                    <option value="Repository_asc">Repository A-Z</option>
                                    <option value="Repository_desc">Repository Z-A</option>
                                    <option value="Status_asc">Status</option>
                                </select>
                            </div>
                            <div class="text-end">
                                <small class="text-muted d-block mb-1">Results</small>
                                <strong>@Math.Min(50, displayedDeployments.Count) of @displayedDeployments.Count</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Active Filters Display -->
        @if (!string.IsNullOrEmpty(selectedRepository) || !string.IsNullOrEmpty(selectedEnvironment) || !string.IsNullOrEmpty(statusFilter) || !string.IsNullOrEmpty(searchTerm))
        {
            <div class="row mb-3">
                <div class="col-12">
                    <div class="alert alert-info d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Active Filters:</strong>
                            @if (!string.IsNullOrEmpty(selectedRepository))
                            {
                                <span class="badge bg-primary me-2">Repo: @selectedRepository</span>
                            }
                            @if (!string.IsNullOrEmpty(selectedEnvironment))
                            {
                                <span class="badge bg-info me-2">Env: @selectedEnvironment</span>
                            }
                            @if (!string.IsNullOrEmpty(statusFilter))
                            {
                                <span class="badge bg-secondary me-2">Status: @GetStatusDisplayName(statusFilter)</span>
                            }
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <span class="badge bg-warning text-dark me-2">Search: "@searchTerm"</span>
                            }
                            <small class="text-muted">(@displayedDeployments.Count results)</small>
                        </div>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="ClearAllFilters">
                            <i class="oi oi-x me-1"></i>
                            Clear All
                        </button>
                    </div>
                </div>
            </div>
        }

        <!-- GitHub Actions List -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="oi oi-list-rich me-2"></i>
                                Recent Workflows
                            </h5>
                            <small class="text-muted">
                                Showing @Math.Min(50, displayedDeployments.Count) of @displayedDeployments.Count workflows
                            </small>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (displayedDeployments.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var deployment in displayedDeployments.Take(50))
                                {
                                    <div class="list-group-item list-group-item-action border-0">
                                        <div class="d-flex w-100 justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <!-- Workflow Header -->
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <div class="d-flex align-items-center">
                                                        <i class="oi oi-code me-2 text-primary"></i>
                                                        <h6 class="mb-0 fw-bold">@deployment.Repository</h6>
                                                        <span class="text-muted mx-2">/</span>
                                                        <span class="text-muted">@deployment.WorkflowDisplayName</span>
                                                    </div>
                                                    <small class="text-muted">@deployment.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                                </div>

                                                <!-- Status and Info Badges -->
                                                <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                                    <span class="badge @GetStateClass(deployment.StatusCategory) px-2 py-1">
                                                        <i class="oi oi-@GetStateIcon(deployment.StatusCategory) me-1"></i>
                                                        @deployment.DisplayStatus
                                                    </span>

                                                    @if (!string.IsNullOrEmpty(deployment.Environment))
                                                    {
                                                        <span class="badge bg-info px-2 py-1">
                                                            <i class="oi oi-globe me-1"></i>
                                                            @deployment.Environment
                                                        </span>
                                                    }

                                                    @if (!string.IsNullOrEmpty(deployment.Branch))
                                                    {
                                                        <span class="badge bg-secondary px-2 py-1">
                                                            <i class="oi oi-fork me-1"></i>
                                                            @deployment.Branch
                                                        </span>
                                                    }

                                                    @if (!string.IsNullOrEmpty(deployment.RunNumberDisplay) && deployment.RunNumberDisplay != "N/A")
                                                    {
                                                        <span class="badge bg-light text-dark px-2 py-1">
                                                            #@deployment.RunNumberDisplay
                                                        </span>
                                                    }
                                                </div>

                                                <!-- Additional Info -->
                                                <div class="d-flex flex-wrap align-items-center gap-3 text-muted small">
                                                    <span>
                                                        <i class="oi oi-person me-1"></i>
                                                        @deployment.CreatorLogin
                                                    </span>

                                                    @if (!string.IsNullOrEmpty(deployment.FormattedDuration))
                                                    {
                                                        <span>
                                                            <i class="oi oi-clock me-1"></i>
                                                            @deployment.FormattedDuration
                                                        </span>
                                                    }

                                                    @if (!string.IsNullOrEmpty(deployment.TriggerType))
                                                    {
                                                        <span>
                                                            <i class="oi oi-flash me-1"></i>
                                                            @deployment.TriggerType
                                                        </span>
                                                    }
                                                </div>
                                            </div>

                                            <!-- Action Buttons -->
                                            <div class="ms-3 d-flex flex-column gap-1">
                                                @if (!string.IsNullOrEmpty(deployment.WorkflowRunUrl))
                                                {
                                                    <a href="@deployment.WorkflowRunUrl" target="_blank"
                                                       class="btn btn-sm btn-outline-primary">
                                                        <i class="oi oi-external-link me-1"></i>
                                                        GitHub
                                                    </a>
                                                }
                                                <button class="btn btn-sm btn-primary"
                                                        @onclick="@(() => Navigation.NavigateTo($"/deployments/{deployment.Repository}/{deployment.RowKey}"))">
                                                    <i class="oi oi-eye me-1"></i>
                                                    Details
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            @if (displayedDeployments.Count > 50)
                            {
                                <div class="card-footer text-center">
                                    <button class="btn btn-outline-primary" @onclick="LoadMoreDeployments">
                                        <i class="oi oi-plus me-2"></i>
                                        Load More (@(displayedDeployments.Count - 50) remaining)
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="oi oi-info mb-3 text-muted" style="font-size: 3rem;"></i>
                                <h5 class="text-muted">No Workflows Found</h5>
                                <p class="text-muted mb-0">
                                    @if (!string.IsNullOrEmpty(selectedRepository) || !string.IsNullOrEmpty(selectedEnvironment) || !string.IsNullOrEmpty(statusFilter) || !string.IsNullOrEmpty(searchTerm))
                                    {
                                        <text>No workflows match your current filters. Try adjusting your selection.</text>
                                    }
                                    else
                                    {
                                        <text>No GitHub Actions found. Connect your repositories to start monitoring workflows.</text>
                                    }
                                </p>
                                @if (!string.IsNullOrEmpty(selectedRepository) || !string.IsNullOrEmpty(selectedEnvironment) || !string.IsNullOrEmpty(statusFilter) || !string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-primary mt-3" @onclick="ClearAllFilters">
                                        <i class="oi oi-refresh me-2"></i>
                                        Clear Filters
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<DeploymentState> allDeployments = new();
    private List<DeploymentState> filteredDeployments = new();
    private List<DeploymentState> displayedDeployments = new();
    private List<string> availableRepositories = new();
    private List<string> availableEnvironments = new();

    private string selectedRepository = "";
    private string selectedEnvironment = "";
    private string statusFilter = "";
    private string searchTerm = "";
    private string sortField = "CreatedAt";
    private bool sortAscending = false;
    private bool isLoading = true;
    private Timer refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetupAutoRefresh();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            allDeployments = await StorageService.GetDeploymentsAsync();

            // Extract available repositories and environments
            availableRepositories = allDeployments
                .Select(d => d.Repository)
                .Where(r => !string.IsNullOrEmpty(r))
                .Distinct()
                .OrderBy(r => r)
                .ToList();

            availableEnvironments = allDeployments
                .Select(d => d.Environment)
                .Where(e => !string.IsNullOrEmpty(e))
                .Distinct()
                .OrderBy(e => e)
                .ToList();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetupAutoRefresh()
    {
        refreshTimer = new Timer(60000); // Refresh every minute
        refreshTimer.Elapsed += async (sender, e) => await InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();
        });
        refreshTimer.Start();
    }

    private async Task OnRepositoryChanged(ChangeEventArgs e)
    {
        selectedRepository = e.Value?.ToString() ?? "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnEnvironmentChanged(ChangeEventArgs e)
    {
        selectedEnvironment = e.Value?.ToString() ?? "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        var sortValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(sortValue))
        {
            var parts = sortValue.Split('_');
            sortField = parts[0];
            sortAscending = parts[1] == "asc";
            ApplyFilters();
        }
    }

    private void ApplyFilters()
    {
        filteredDeployments = allDeployments.ToList();

        // Repository filter
        if (!string.IsNullOrEmpty(selectedRepository))
        {
            filteredDeployments = filteredDeployments.Where(d => d.Repository == selectedRepository).ToList();
        }

        // Environment filter
        if (!string.IsNullOrEmpty(selectedEnvironment))
        {
            filteredDeployments = filteredDeployments.Where(d => d.Environment == selectedEnvironment).ToList();
        }

        // Status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            if (statusFilter == "pending")
            {
                filteredDeployments = filteredDeployments.Where(d =>
                    d.StatusCategory == "pending" || d.StatusCategory == "in_progress").ToList();
            }
            else
            {
                filteredDeployments = filteredDeployments.Where(d => d.StatusCategory == statusFilter).ToList();
            }
        }

        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            var searchLower = searchTerm.ToLower();
            filteredDeployments = filteredDeployments.Where(d =>
                (d.Repository?.ToLower().Contains(searchLower) ?? false) ||
                (d.WorkflowDisplayName?.ToLower().Contains(searchLower) ?? false) ||
                (d.Branch?.ToLower().Contains(searchLower) ?? false) ||
                (d.CreatorLogin?.ToLower().Contains(searchLower) ?? false) ||
                (d.Environment?.ToLower().Contains(searchLower) ?? false)
            ).ToList();
        }

        ApplySort();
    }

    private void ApplySort()
    {
        displayedDeployments = sortField switch
        {
            "Repository" => sortAscending
                ? filteredDeployments.OrderBy(d => d.Repository).ToList()
                : filteredDeployments.OrderByDescending(d => d.Repository).ToList(),
            "Environment" => sortAscending
                ? filteredDeployments.OrderBy(d => d.Environment).ToList()
                : filteredDeployments.OrderByDescending(d => d.Environment).ToList(),
            "Status" => sortAscending
                ? filteredDeployments.OrderBy(d => d.StatusCategory).ToList()
                : filteredDeployments.OrderByDescending(d => d.StatusCategory).ToList(),
            "CreatedAt" => sortAscending
                ? filteredDeployments.OrderBy(d => d.CreatedAt).ToList()
                : filteredDeployments.OrderByDescending(d => d.CreatedAt).ToList(),
            _ => filteredDeployments.OrderByDescending(d => d.CreatedAt).ToList()
        };
    }

    private void SetStatusFilter(string filter)
    {
        statusFilter = filter;
        ApplyFilters();
    }

    private void ClearAllFilters()
    {
        selectedRepository = "";
        selectedEnvironment = "";
        statusFilter = "";
        searchTerm = "";
        ApplyFilters();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void LoadMoreDeployments()
    {
        // Navigate to the full deployments page
        Navigation.NavigateTo("/deployments");
    }

    private int GetTotalCount() => filteredDeployments.Count;

    private int GetStatusCount(string status)
    {
        if (status == "pending")
            return allDeployments.Count(d => d.StatusCategory == "pending" || d.StatusCategory == "in_progress");
        return allDeployments.Count(d => d.StatusCategory == status);
    }

    private string GetStatusDisplayName(string status)
    {
        return status switch
        {
            "in_progress" => "Running",
            "pending" => "Pending/Active",
            "failure" => "Failed",
            "success" => "Success",
            _ => status
        };
    }

    private string GetStateClass(string statusCategory)
    {
        return statusCategory?.ToLower() switch
        {
            "success" => "bg-success",
            "failure" => "bg-danger",
            "pending" => "bg-warning",
            "in_progress" => "bg-info",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStateIcon(string statusCategory)
    {
        return statusCategory?.ToLower() switch
        {
            "success" => "check",
            "failure" => "x",
            "pending" => "clock",
            "in_progress" => "reload",
            "cancelled" => "ban",
            _ => "question-mark"
        };
    }

    public void Dispose()
    {
        refreshTimer?.Stop();
        refreshTimer?.Dispose();
    }
}